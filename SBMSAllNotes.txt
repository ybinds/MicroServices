javabyraghu@gmail.com
+91 - 9985 39 66 77		
			Date : 26-08-2022
		Spring Boot and Microservices
			Mr. Raghu
			 (ASHOK IT)
	----------------------------------------------
		Chapter - 1 : Spring Core
*) DI v/s IoC:-
Dependency Injection v/s Inversion of Control (Spring Container)

*) Dependency : A variable (instance variable) exist inside a class
		(Spring Bean)
=> Types of Dependencies: (3)
1. Primitive Type Dependency (PTD) [8+1]
byte, short, int , long, float, double, boolean, char and String
If a variable is created using one of above datatype then it is
called as PTD.

2. Collection Type Dependency (CTD) [4]  (java.util)
If a variable is created using one of below types
	List, Set, Map [I] and Properties (C)
 then it is called as CTD.

3. Reference Type Dependency (RTD) ****
 A class or interface is used as a DataType and variable
 is created then it is called as RTD.
========================================================
Injection(4) : Providing data to variables (after object creation)

1. Setter Injection (SI):
   Provide/inject value to dependency using setter/set method.
   ** Object is created using default constrcutor and data is
	provided using set method.
class A{
  int id;
  void setId(int id) {
    this.id = id;
  }
}
 A  oa = new A();
 oa.setId(10);

===================================
2. Constructor Injection (CI): Creating object and providing
	data using parameterized constructor.

class A{
  int id;
  A(int id) {
    this.id = id;
  }
}
A oa = new A(10);
========================================================
3. LookUp Method Injection (LMI)
4. Interface Injection (II)

=============================================================
OOPs --- Java
DI   --- Spring container ( Spring IoC )

Q) What is Dependency Injection ?
A) 
=> Injecting all dependencies to its dependent class.

=> Creating objects from independent to next level dependent
classes and link (inject) them.

=> Create objects and link them based on relation.

Q) How many types of Dependencies in Spring ? and What are they?
A) They are 3 types , PTD, CTD, RTD.

Q) What is Injection and How many types are there in Spring?
A) Injection : providing data to dependnecies
   Total : 4 , Spring supports: 3 (SI/CI/LMI), 
   mostly used : 2 (SI/CI)
========================================================
Softwares:
1. JDK 17 (8/11)
https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html

2. STS (Spring Tool Suite)
https://spring.io/tools
> Choose OS based Link 
> Wait for download finish
> Double click on JAR file (choose JDK based extract)
> Open extracted folder (ex: sts-4.15.3.RELEASE)
> Double click on "SpringToolSuite4"
> Created a new folder (workspace) and choose same
	ex: D:\Workspace7AM_082022
> Click on Launch button.

			Date : 27-08-2022
		  Spring Boot and Microservices
		           Mr. RAGHU
			  ( ASHOK IT )
	-------------------------------------------------
Spring Container  ( Spring IoC) [ Inversion of Control ]
---------------------------------------------------------
1. Find/Scan classes 
2. Create object 
3. Provide data and link objects.
4. Destroy the obj/container

*) Spring container takes 2 inputs : 
A) Spring Bean (class + rules)
B) Spring Configuration File ( XML / Java / Annotation )
=========================================================
XML Configuration Tags
-----------------------
<bean>			--  creating object
<property>		--  calling set method
<constructor-arg>	--  using parameterized constructor
<value>                 --  Primitive Type 
<list> [List] <set> [Set] <map> [Map] <props> [Properties]

<ref/>			-- Reference Type (link two objects)
----------------------------------------------------------------
in STS IDE:-
1. create one project
> File > new > Spring Starter project > next > Search
   Spring Web > choose it > next > finish

 Key                         Description
-------------------------------------------------
ctrl+shift+T       Open pre-defined classes/interfaces
ctrl + O           To view current class members
		(press 2nd time to include parent members)
ctrl + L	 Goto Line Numbers
ctrl+shift+R      To Open workspace/project classes...

			Date : 29-08-2022
		Spring Boot and Microservices
			Mr. Raghu
		        (ASHOK IT)

Demo Sessions:
https://www.youtube.com/watch?v=KpZI-Chy4uE&t=19s&ab_channel=AshokIT
https://www.youtube.com/watch?v=mtpWrEY5p60&ab_channel=AshokIT
---------------------------
https://www.youtube.com/watch?v=XVPybhj_5X8&ab_channel=AshokIT
https://www.youtube.com/watch?v=LkQ63XTkA6I&ab_channel=AshokIT
================================================================
*) Spring Container :
1. Find/scan classes
2. Create object
3. Provide data and link objects
4. Destory objects/container.

*) Spring container takes two inputs.
1. Spring Bean : class that follows rules given by spring container
2. Spring Configuration : XML/ Java/ Annotation.
======================Spring Bean==========================
1. public class  (must be)
2. class should be in a package.
 [ must be in base package or sub-package]
3. variables recomanded to be private.
   Methods need to be public only.
4. Provide default constructor with mutators
	(setter/getter methods)
		[or]
        Parameterized constrcutor
	(Even both are also valid)
5. Our class can have Object class methods overriden.
   toString(), equals() and hashCode()

6. class can inherit (extends / implements ) other valid
   Spring Beans only. 
   But not Servlets/EJB ... (other external APIS)

*) Spring Beans can implement java.io.Serializable (I)

7. Annotations: (can be)
	+ Core Annotations (java.lang package)
	+ *** Spring F/w Annotation
	+ Integrations (JPA/....)

========================================================
ctrl+shift+T : object
ctrl+O    : members

*) native : A method which has its impl code at another language
	   (C-language)
*) When ever we override equals() method we should even override
   hashCode() method also (Contract b/w equals and hashCode)

*) Serialization : covert object into some other formats
	(n/w format, file, global formats XML/JSON)

Q) Is class B serialized? 
class A implements Serializable {
}
class B extends A{
}
A) Yes
Q) I want B class should avoid serialized?
  [ javabyraghu@gmail.com ]
=============XML Configurtation=======================================
<bean> --- creating object
<property> --- calling set method
<constructor-arg> -- calling parameterized constructor
<value>        --- Primitive 
<list> <set> <map> <props>  -- for collections
<ref/>       --- link objects
===============================================================
		   Spring First Application
*) Just test container creation, object creation, setting data
   check object is crated!!

*) New Container is " ApplicationContext " it is interface.
   Impl class : ClassPathXmlApplicationContext (C)

   ApplicationContext = Spring container
   XML  = XML File
   ClassPath = Location of file (src/main/resources)

1. Spring Bean
2. Spring XML Configuration
3. Test class 
=========Ex#1==========
1. Spring Bean
package my.app;
public class OracleCon {
   private String driver;
   private String url;
   // default, set/get
   // toString
}
2. Spring XML Configuration
<bean id="con" class="my.app.OracleCon">
	<property name="driver">
		<value>oracle</value>
	</property>
	<property name="url">
		<value>sample</value>
	</property>
</bean>
3. Test class 
 ApplicationContext ac = new ClassPathXmlApplicationContext("config.xml");
 //read object from container
 OracleCon con = (OracleCon) ac.getBean("con");
 //print object to view data
 sysout(con);

 <bean> -- object
 Spring Bean -- class

===Full Steps=========================================================
1. Start / Open Eclipse (or) STS
2. Select workspace
3. Create simple Maven project
 > file > new > other > Search Maven > choose Maven Project
 > next > Choose Checkbox [v] Create Simple Project > next
 > Enter details

 GroupId    : my.app
 ArtifactId : SpringFirstApp
 Version    : 1.0

> Finish

4. pom.xml (add some content)
	 <properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>5.3.22</version>
		</dependency>
	</dependencies>

//ctrl+A  , ctrl+I , ctrl+S

5. Update Maven project
> Right click on Project > maven > update project > Finish

-----code-----------------------------
1. write a java class and generate code using source menu
ex
package my.app;

public class OracleCon {
	private String driver;
	private String url;
	
	public OracleCon() {
		super();
	}
	
	public String getDriver() {
		return driver;
	}
	public void setDriver(String driver) {
		this.driver = driver;
	}
	public String getUrl() {
		return url;
	}
	public void setUrl(String url) {
		this.url = url;
	}
	
	@Override
	public String toString() {
		return "OracleCon [driver=" + driver + ", url=" + url + "]";
	}
	
}
2. Right click on src/main/resource folder > new > file
  > enter name : config.xml  > finish
  > click on source tab and add below content
---------
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="con" class="my.app.OracleCon">
		<property name="driver">
			<value>oracle</value>
		</property>
		<property name="url">
			<value>sample</value>
		</property>
	</bean>

</beans>
------------
3. Test class
package my.app;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

//ctrl+shift+O

public class Test {
	// main   ctrl+space   enter
	public static void main(String[] args) {
		ApplicationContext ac = new ClassPathXmlApplicationContext("config.xml");
		OracleCon con = (OracleCon) ac.getBean("con");
		System.out.println(con);
	}
}

// run : ctrl + F11
=====================================================

		      Date : 30-08-2022
		Spring Boot and Microservices
			Mr. Raghu
		        (ASHOK IT)

Previous Sessions:
https://www.youtube.com/watch?v=KpZI-Chy4uE&ab_channel=AshokIT
https://www.youtube.com/watch?v=mtpWrEY5p60&ab_channel=AshokIT
https://www.youtube.com/watch?v=XVPybhj_5X8&ab_channel=AshokIT
https://www.youtube.com/watch?v=LkQ63XTkA6I&ab_channel=AshokIT
https://www.youtube.com/watch?v=nH5EZc6afB4&ab_channel=AshokIT
==============================================================
1. By default Maven application is created with version JDK 1.5
   To update to some other version, add below in pom.xml
<properties>
	<maven.compiler.source>1.8</maven.compiler.source>
	<maven.compiler.target>1.8</maven.compiler.target>
</properties>

2. To download and add spring jars to write application,
<dependency>
	<groupId>org.springframework</groupId>
	<artifactId>spring-context</artifactId>
	<version>5.3.22</version>
</dependency>

3. Why Test class?
-> To create Spring Container (ApplicationContext).
-> ClassPathXmlApplicationContext
     : creating Spring container by reading XML file from
         src/main/resources folder.
-> getBean : This method is used to read object from container.

4. XSD Lines (Xml Schema Design) : It provides all tags details
    to write in XML File (tag/child tags , order, occurances).

Ref:
https://docs.spring.io/spring-framework/docs/4.2.x/spring-framework-reference/html/xsd-configuration.html

 ---------------------------------------------------------
	Key			Description
 ---------------------------------------------------------
 select content 
   crtr + shift +  /               to comment lines
   ctrl + shift +  \               to uncomment
 ---------------------------------------------------------
1. Spring Bean (class + rules)
2. Spring Configuration (XML/Java/Annotation)
3. Test class

==============================================================
Syntax for Ref Type:

 <property name="variableName">
    <ref bean="objForLink"/>
 </property>

 Service [repo=Repository [entity=A]]

===Full code for Reference type ======================
1. Spring Beans
package my.app;

public class Repository {

	private String entity;
	
	//alt+shift+S  O  > Deselect All > Generate
	public Repository() {
		super();
	}
	//alt+shift+S  > R  > Select All > Generate
	public String getEntity() {
		return entity;
	}
	public void setEntity(String entity) {
		this.entity = entity;
	}
	//alt+shift+S  > S  > Generate
	@Override
	public String toString() {
		return "Repository [entity=" + entity + "]";
	}
	
	
	
}
---------
package my.app;

public class Service {

	private Repository repo;

	public Service() {
		super();
	}

	public Repository getRepo() {
		return repo;
	}

	public void setRepo(Repository repo) {
		this.repo = repo;
	}

	@Override
	public String toString() {
		return "Service [repo=" + repo + "]";
	}
	
	
}
-----------
2. config.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="rob" class="my.app.Repository">
    	<property name="entity">
    		<value>A</value>
    	</property>
    </bean>
    <bean id="sob" class="my.app.Service">
    	<property name="repo">
    		<ref bean="rob"/> <!-- It Creates Link b/w objects -->
    	</property>
    </bean>

</beans>

3. Test class
package my.app;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Test {
	//ctrl + F11 // ctrl+ Fn + F11
	public static void main(String[] args) {
		ApplicationContext ac = new ClassPathXmlApplicationContext("config.xml");
		Service s = (Service) ac.getBean("sob");
		System.out.println(s);
	}
}


4. pom.xml
<properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>5.3.22</version>
		</dependency>
	</dependencies>
=============================================================
Spring Annotations:-
1. StereoType Annotations :
 Annotation that indicates creating object to spring bean.

A) @Component : creating object
B) @Repository : creating object + Database Operations
C) @Service    : creating object + Business Logics/cal/Tx Management
D) @Controller  : creating object + HTTP Operations (WEB MVC)
E) @RestController : creating object + HTTP (RestFul Webservices)

===================================
Ex#1
package my.app;
@Component("sob")
public class Sample {
}
//then Spring container creats object to Sample with name sob.
Ex#2
package my.app;
@Component
public class Sample {
}
//then Spring container creats object to Sample with name sample.



			Date : 01-09-2022
		Spring Boot and Microservices
		         Mr. Raghu
			 (ASHOK IT)
	-----------------------------------------------
Spring Annotation Configuration (Java with Annotation):-
-------------------------------------------------------
@Component : Container creates object to that class.
@Value     : To provide data to variable (dependency)
  | -- To hardcode variables / dependencies
  | -- To read data from resources (.properties/.yml/.xml)
  | -- To provide one SpEL (Spring Expression Language)

HardCoding :
 Assign a direct value to a variable inside source code
==========================================================
Spring Core First Application
1. Spring bean (class + rules ) + 2. Spring Configuration 
3. Test class (only to check object is created or not?)
---Example-------------------
1. Spring Bean + Spring Annotation Config
package my.app;
@Component("hob")
public class HandlerInfo {
    @Value("data")
    private String reolverCode;
    @Value("temp")
    private String pathToStore;
    //def const
    //set,get...
    //toString
}

*) Injections:
1. Setter Injection
2. Const inj
3. LMI
4. II

Note:-
*) @Value : 
  It is called as 
    Value based Injection/Direct Injection/Filed Injection
  No need of setter methods. (Default constrcutor is required)
*) Annotation Configuration is faster compared to XML
   Bcoz no reading / parsing for additional files.
*) Annotation Configuration can be used only for our classes
   (if we have .java code , can be compiled)
   Not for pre-defined classes.
*) Annotation Configuration is used for default single object
   for a class. Ex: Database connection, ViewResolver..etc

----------------------------------------------------------
Q) What is var-args and how it is different from array?
   provide all rules to work with var-args.
A)

Q) What is casting (up and down) ? 

Q) What is overloading ? what are all rules we need to follow?

Q) What is dynamic polimorphisum? 

Q) What is method overriding?
=========================================================
Example code:#1
1. Spring Bean + annotation config
package my.app;
//ctrl+shift+O
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Component("hob")
public class HandlerInfo {
	@Value("data")
	private String reolverCode;
	@Value("temp")
	private String pathToStore;
	
	public HandlerInfo() {
		super();
	}

	@Override
	public String toString() {
		return "HandlerInfo [reolverCode=" + reolverCode + ", pathToStore=" + pathToStore + "]";
	}

}

2. Test class
package my.app;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Test {

	public static void main(String[] args) {
		//1. first create empty container
		AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext();
		// 2. find all classes from given basePackage(package and sub-package)
		ac.scan("my.app");
		// 3. refresh spring container
		ac.refresh();
		//4. read object
		HandlerInfo ob = ac.getBean("hob",HandlerInfo.class);
		//5. print object
		System.out.println(ob); //obtoString()
	}
}
=============================================================
basePackage :- This is the input must be given incase of
	Spring Annotation configuration ( So that container
	can find our classes )

=> Container will try to find classes from given package
	and subpackages.

=> @ComponentScan is used to provide basePackages to scan
   our classes 

@ComponentScan(basePackages = "com.app") means
   find classes from app package and app all subpackage classes

=> Always define one additional class to provide basePackage
	using annotation @ComponentScan.

Possible examples:
@ComponentScan({"com.app","test.one","abc.xyz"})
		--or--
@ComponentScan(basePackages =  {"com.app","test.one","abc.xyz"})

@ComponentScan("com.app")
	--or--
@ComponentScan(basePackages = "com.app")

*) if your class is having @Component but not under basePackage
  then it has no meaning. ie container is unable to finsd your class.

========Example#2==================================
1. Spring bean
package com.app;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Component("eobj")
public class EmailConfig {
	
	@Value("gmail")
	private String host;
	
	@Value("852")
	private Integer port;
	
	@Override
	public String toString() {
		return "EmailConfig [host=" + host + ", port=" + port + "]";
	}
	
	
}
--------------
package com.app;

import org.springframework.context.annotation.ComponentScan;

//@ComponentScan({"com.app","test.one","abc.xyz"})
//@ComponentScan(basePackages =  {"com.app","test.one","abc.xyz"})
//@ComponentScan("com.app")
@ComponentScan(basePackages = {"com.app","my.one"})
public class MyAppConfig {

}
------------------------
package com.app.test;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Component("cob")
public class MyCacheData {

	@Value("redis")
	private String provider;

	@Override
	public String toString() {
		return "MyCacheData [provider=" + provider + "]";
	}
	
	
}
---------------
package my.one.format;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Component("vr")
public class ViewResolver {
	@Value("pages")
	private String prefix;
	
	@Value("jsp")
	private String suffix;
	
	@Override
	public String toString() {
		return "ViewResolver [prefix=" + prefix + ", suffix=" + suffix + "]";
	}
	
	
}
---------------------------------
package com.app;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Test {

	public static void main(String[] args) {
		AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext(MyAppConfig.class);
		/*ac.scan("com.app"); 	ac.refresh();*/
		//Object ob = ac.getBean("eobj");
		//Object ob2 = ac.getBean("cob");
		Object ob3 = ac.getBean("vr");
		//System.out.println(ob);
		//System.out.println(ob2);
		System.out.println(ob3);
	}
}

			Date : 02-09-2022
		Spring Boot and Microservices
		         Mr. Raghu
			 (ASHOK IT)
	-----------------------------------------------
javabyraghu@gmail.com
Spring Annotation Configuration (Java with Annotation):-
----------------------------------------------------------
@ComponentScan : basePackage , to find classes.
@Component : To create object

*) If your class (Spring Bean), present under basePackage
   (same package or its subpackage) and having StereoType
   ( @Component ) annotation, then container creates object
   to your class.

*) @Value: : To provide data to variable (dependency) -- Field Injection
  | -- To hardcode variables / dependencies
  | -- To read data from resources (.properties/.yml/.xml)
  | -- To provide one SpEL (Spring Expression Language)
============================================================
       Direct Data                Runtime data
  Programmer data             EndUser data (Register,Login)
   DB Connection                  Posting 
   Cache Config                     Like, Share...
   Email Config
   ..etc

Q) Why are we using .properties / .xml / .yml files here?
A) Some data is required to start application like Database
  Connection, JPA(Hibernate) Details, Email Config, 
  Security Configuration..etc
===========================================================
=> .properties file will store data in key=val format
=> key are case-sensitive. 
=> If same key is provided multiple time with different value
   then last combination is taken
=> Symbol # indicates comment in properties file
=> You can use _(underscore) . (dot) - (dash) symbols in key name.
=> Autoparsing is supported based on variable datatype.
    By default key and value (both ) are String datatype
    ie   app.sid=200
         app.sid  is String
	 200      is String

Notes:
1. We need to create one proeprties file with any name
  ex: myapp.properties   then add some key=val pairs
2. @PropertySource is used to load our properties file into
   Spring container.
3. Spring container creates Environment(I) [org.springframework.core.env]
   memory (Object).
   Environment environment = new StandardEnvironment();
   and holds all key=vals.
4. If you want to inject data to your variables(Dependencies)
   then use below syntax:
                  @Value("${key}")

==============Full Example =====================
1. Properties file
#This is sample properties file
#my.db.driver=OracleDriver
my.db.driver=MySQLDriver
my.db-url=jdbc:oracle:thin:sample
my.db_user=abcd
my.db-pwd=raghu
# keys are case-sensitive
my.db-Pwd=sample
my.grade.id=240S

2. Spring Config Input
package com.app;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.PropertySource;

// you can write annotation in any order
@ComponentScan(basePackages = "com.app")
@PropertySource("classpath:myapp.properties")
public class MyAppConfig {

}

3. Spring Bean + Annotation Configuration
package com.app.bean;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Component("con")
public class DatabaseConnection {

	@Value("${my.grade.id}")
	private int code;
	
	@Value("${my.db.driver}")
	private String driver;
	@Value("${my.db-url}")
	private String url;
	@Value("${my.db_user}")
	private String userName;
	@Value("${my.db-pwd}")
	private String userPwd;
	
	@Override
	public String toString() {
		return "DatabaseConnection [code=" + code + ", driver=" + driver + ", url=" + url + ", userName=" + userName
				+ ", userPwd=" + userPwd + "]";
	}
	
	
	
	
}


4. Test class
package com.app.test;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import com.app.MyAppConfig;

public class Test {

	public static void main(String[] args) {
		ApplicationContext ac = new AnnotationConfigApplicationContext(MyAppConfig.class);
		Object ob = ac.getBean("con");
		System.out.println(ob);
		
	}
}
===========================================================
	    <ref/> type   == @Autowired

Inheritance (IS-A) :
  Connect classes using extends / implements

  c--------extends------------c
  I----------extends-----------I
  C------------implements---------------I
  I---------------(NOT POSSIBLE)--------C

*) Association (HAS-A)
  Creating one class/interface reference inside another class
  (as instance variable)

class A{}
interface B{}

class C{
   int id;
   A   oa; //HAS-A
   B   ob; //HAS-A
}


@Autowired : Annotation is used to inject its dependency data/object
   In simple find required object and link with current class
   object.
===================Example for Autowired==============
1. Spring Beans
package com.app.repo;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Component
public class MyRepository {
	
	@Value("SAMPLE")
	private String entity;

	@Override
	public String toString() {
		return "MyRepository [entity=" + entity + "]";
	}
	
	
}
---------
package com.app.serv;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.app.repo.MyRepository;

@Component
public class MyService {
	
	@Autowired
	private MyRepository repo; //HAS-A

	@Override
	public String toString() {
		return "MyService [repo=" + repo + "]";
	}
	
	
}
---------
3. Spring Config File
package com.app.config;

import org.springframework.context.annotation.ComponentScan;

//no default base package is given by Spring Core
@ComponentScan(basePackages = "com.app")
public class MyAppConfig {

}

4. Test class
package com.app.test;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import com.app.config.MyAppConfig;

public class MyTest {

	public static void main(String[] args) {
		ApplicationContext ac = new AnnotationConfigApplicationContext(MyAppConfig.class);
		Object ob = ac.getBean("myService");
		System.out.println(ob);
		
		
	}
}


			Date : 02-09-2022
		Spring Boot and Microservices
		         Mr. Raghu
			 (ASHOK IT)
	-----------------------------------------------
@Autowired : To link objects. 
	Injecting Dependency object into dependent class.

1. If 1 child object (One Dependency Bean) is found
		---- Inject/link them

2. If Zero child object (zero Dependency Bean) is found
		--- Throwing Exception (Child is Must)
		---- Else use @Autowired(required=false)
			In this case variable holds null value

3. If multiple child objects (multiple Dependency Bean) are found
  then container throws exception:
     NoUniqueBeanDefinitionException


Q) Is there any default package name given for @ComponentScan
  (basePackage)?
A) No. In Spring Apps we (Programmer) must provider externally
   basePackage for Annotation Configuration.
   But in Spring Boot, starter class/main class package is
   taken as basePackage.


*)Note:
A) @Autowired internally uses one boolean attribute required=true
That says child/dependency object is must. If no object is
found for injection then container will throw Exception
  NoSuchBeanDefinitionException

B) We can request container to provide null as default insted
of throwing exception, by making code as
	@Autowired(required = false)

========= Autowired Case#2 Example Code ===================
1. Spring Bean
package com.app.service;

import org.springframework.beans.factory.annotation.Value;

//@Component
public class MyService {

	@Value("SAMPLE DATA")
	private String code;

	@Override
	public String toString() {
		return "MyService [code=" + code + "]";
	}
	
	
}
---------------
package com.app.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.app.service.MyService;

@Component
public class MyController {
	//@Autowired
	@Autowired(required = false)
	private MyService service; //HAS-A

	@Override
	public String toString() {
		return "MyController [service=" + service + "]";
	}
	
	
}

2. Spring Config class
package com.app.config;

import org.springframework.context.annotation.ComponentScan;

@ComponentScan(basePackages = "com.app")
public class MyAppConfig {

}

3. Test class
package com.app.test;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import com.app.config.MyAppConfig;
import com.app.controller.MyController;

public class TestApp {

	public static void main(String[] args) {
		ApplicationContext ac = new AnnotationConfigApplicationContext(MyAppConfig.class);
		MyController mc =  ac.getBean("myController",MyController.class);
		System.out.println(mc);
	}
}
===============================================================
		Spring LifeCycle Methods
Method: It is block of code that executes a task, must be called
        manually (calling code should be given by programmer)

LifeCycle Method: A method which is called by container/ f/w.
      /VMs in between Object creation and destory.

=> Adv Java (Servlets) --- 3 LifeCycle Methods (Must be there)
 1. init()
 2. service()
 3. destroy()

=> In Spring -- 2 LifeCycle Methods (optional)
 1. init method
 2. destroy method
   To connect with external resources we use them

=> These methods are optional.
=> We can configure them in 3 ways
  A) using XML Configuration
     <bean  init-method="___" destroy-method="___">
     </bean>

  B)*** Using Pre-defined interfaces given by Spring f/w.
    InitializingBean(I)
      afterPropertiesSet()
    DisposableBean(I)
      destroy()

  C) JSR Annotation 
     @PreConstruct
     @PostDestroy

=============================================================
	Key			Description
 ctrl+shift+X         To convert selected content to UpperCase
 ctrl+shift+Y         To convert selected content to LowerCase
--------------------------------------------------------------

====LifeCycle methods using XML Configuration===========
1. Spring Bean
package com.app.service;

public class ExcelExportService {

	private String fileName;
	private String mode;
	
	public void setup() {
		//lot of code...
		System.out.println("FROM INIT METHOD");
	}
	
	public void clean() {
		//some code..
		System.out.println("FROM DESTORY METHOD");
	}

	public ExcelExportService() {
		super();
		System.out.println("FROM CONSTRUCTOR");
	}

	public String getFileName() {
		return fileName;
	}

	public void setFileName(String fileName) {
		this.fileName = fileName;
		System.out.println("FROM SETTER METHOD");
	}

	public String getMode() {
		return mode;
	}

	public void setMode(String mode) {
		this.mode = mode;
	}

	@Override
	public String toString() {
		return "ExcelExportService [fileName=" + fileName + ", mode=" + mode + "]";
	}
	
	
}

2. XML Config
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean 
    id="eobj" 
    class="com.app.service.ExcelExportService"
    init-method="setup"
    destroy-method="clean"
    >
    
    	<property name="fileName" value="Sample" />
    	<property name="mode" value="CSV FORMAT"/>
    </bean>

</beans>

3. test class
package com.app.test;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Test {

	public static void main(String[] args) {
		ClassPathXmlApplicationContext ac = new ClassPathXmlApplicationContext("beans.xml");
		Object ob = ac.getBean("eobj");
		System.out.println(ob);
		ac.close(); //must be called
	}
}
*************************************************************
===============LifeCycle Methods -- using interfaces========
*************************************************************
1. Spring Bean
package com.app.service;

import org.springframework.beans.factory.DisposableBean;
import org.springframework.beans.factory.InitializingBean;

public class ExcelExportService implements InitializingBean, DisposableBean {

	private String fileName;
	private String mode;
	
	public void afterPropertiesSet() throws Exception {
		//lot of code...
		System.out.println("FROM INIT METHOD");
	}
	
	public void destroy() throws Exception {
		//some code..
		System.out.println("FROM DESTORY METHOD");
	}

	public ExcelExportService() {
		super();
		System.out.println("FROM CONSTRUCTOR");
	}

	public String getFileName() {
		return fileName;
	}

	public void setFileName(String fileName) {
		this.fileName = fileName;
		System.out.println("FROM SETTER METHOD");
	}

	public String getMode() {
		return mode;
	}

	public void setMode(String mode) {
		this.mode = mode;
	}

	@Override
	public String toString() {
		return "ExcelExportService [fileName=" + fileName + ", mode=" + mode + "]";
	}
	
	
}

2. Spring XML File
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean 
    id="eobj" 
    class="com.app.service.ExcelExportService" >
    
    	<property name="fileName" value="Sample" />
    	<property name="mode" value="CSV FORMAT"/>
    </bean>

</beans>

3. test class
package com.app.test;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Test {

	public static void main(String[] args) {
		ClassPathXmlApplicationContext ac = new ClassPathXmlApplicationContext("beans.xml");
		Object ob = ac.getBean("eobj");
		System.out.println(ob);
		ac.close();
	}
}
=============================================================
JSR - 250 : https://jcp.org/en/jsr/detail?id=250

=====LifeCycle Methods using JSR - 250 Annotations ========
1. Spring Bean
package com.app.service;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

public class ExcelExportService {

	private String fileName;
	private String mode;
	
	@PostConstruct
	public void setup() throws Exception {
		//lot of code...
		System.out.println("FROM INIT METHOD");
	}
	
	@PreDestroy
	public void clean() throws Exception {
		//some code..
		System.out.println("FROM DESTORY METHOD");
	}

	public ExcelExportService() {
		super();
		System.out.println("FROM CONSTRUCTOR");
	}

	public String getFileName() {
		return fileName;
	}

	public void setFileName(String fileName) {
		this.fileName = fileName;
		System.out.println("FROM SETTER METHOD");
	}

	public String getMode() {
		return mode;
	}

	public void setMode(String mode) {
		this.mode = mode;
	}

	@Override
	public String toString() {
		return "ExcelExportService [fileName=" + fileName + ", mode=" + mode + "]";
	}
	
	
}

2. XML Config file
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        
        ">
        
	<context:annotation-config/>

    <bean 
    id="eobj" 
    class="com.app.service.ExcelExportService" >
    
    	<property name="fileName" value="Sample" />
    	<property name="mode" value="CSV FORMAT"/>
    </bean>

</beans>

3. test class
package com.app.test;

import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Test {

	public static void main(String[] args) {
		ClassPathXmlApplicationContext ac = new ClassPathXmlApplicationContext("beans.xml");
		Object ob = ac.getBean("eobj");
		System.out.println(ob);
		ac.close();
	}
}

4. pom.xml
<properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>5.3.22</version>
		</dependency>
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>javax.annotation-api</artifactId>
			<version>1.3.2</version>
		</dependency>

	</dependencies>
===using Annotation Config====================================
1. Spring Bean
package com.app.service;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.springframework.stereotype.Component;

@Component("eobj")
public class ExcelExportService {

	private String fileName;
	private String mode;
	
	@PostConstruct
	public void setup() throws Exception {
		//lot of code...
		System.out.println("FROM INIT METHOD");
	}
	
	@PreDestroy
	public void clean() throws Exception {
		//some code..
		System.out.println("FROM DESTORY METHOD");
	}

	
	@Override
	public String toString() {
		return "ExcelExportService [fileName=" + fileName + ", mode=" + mode + "]";
	}
	
	
}

2. Spring Config class
package com.app.test;

import org.springframework.context.annotation.ComponentScan;

@ComponentScan("com.app")
public class MyAppConfig {

}

3. test class
package com.app.test;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Test {
	
	public static void main(String[] args) {
		AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext(MyAppConfig.class);
		Object ob = ac.getBean("eobj");
		System.out.println(ob);
		ac.close();
	}

	
}
=======================================================
Q) How many lifecycle methods are supported by Spring F/w?
A) 2 methods, they are : init and destroy

Q) In how many ways we can confiure them?
A) 3 ways
  1. XML  <bean init-method="___" destroy-method="____">
  2. Spring Pre-defined Interfaces
	  InitializingBean(I) DisposableBean(I)
  3. JSR-250 Annotations

Q) How can we activate JSR Annotations in XML Config?
A)
   <context:annotation-config/>  in XML File
   also add one dependency in POM.xml
   <dependency>
	<groupId>javax.annotation</groupId>
	<artifactId>javax.annotation-api</artifactId>
	<version>1.3.2</version>
  </dependency>

			Date : 05-09-2022
		Spring Boot and Microservices
		         Mr. Raghu
			 (ASHOK IT)
	-----------------------------------------------
1. XML Configuration Limitations:
-> Very Lengthy Config
-> XML --> Parsed into Java code -> Then executed
  (Slow in Processing)

2. Annotation Configuration Limitations:
-> Only Applied for programmer defined classes.
   [not applied for pre-defined class]
-> Given only single object configuration.

3. Spring Java Based Configuration :-
---------------------------------------
=>***if we want configure one bean (Object) 
	for pre-defined classes use Java Config.
=> If we want to configure multiple beans (for one class)
    then  use Java Config.

--Steps to implement Java Based Configuration -------
1. Define one public class (with any name)
2. Add one annotation over class @Configuration
3. Define one method for one object creation
4. Add one annotation @Bean

@Configuration
public class ____ {
   //1 method = 1 object
   @Bean
   public <ClassName> <objectName>() {
     //...
   }
}

*) @Configuration Annotation indicates Spring container input.
   That contains all Bean Details, to be created.
*) @Bean --> Creating object (pre-defined, programmer-defined).
   Re-usable object.
==========Example Java Config Code=======================================
1. Spring Bean 
package com.app;

public class DriverManager {

	private String driverClass;
	private String url;

	public DriverManager() {
		super();
	}
	public String getDriverClass() {
		return driverClass;
	}
	public void setDriverClass(String driverClass) {
		this.driverClass = driverClass;
	}
	public String getUrl() {
		return url;
	}
	public void setUrl(String url) {
		this.url = url;
	}
	@Override
	public String toString() {
		return "DriverManager [driverClass=" + driverClass + ", url=" + url + "]";
	}
	
	
}

2. Spring Java Configuration
package com.app;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class MyAppConfig {

	//1 method = 1 object
	@Bean
	public DriverManager conObj() {
		DriverManager dm = new DriverManager();
		dm.setDriverClass("ORACLE");
		dm.setUrl("JDBC:ORACLE");
		return dm;
	}
}


3. Test class
package com.app;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class MyTest {

	public static void main(String[] args) {
		ApplicationContext ac = new AnnotationConfigApplicationContext(MyAppConfig.class);
		Object ob = ac.getBean("conObj");
		System.out.println(ob);
		
	}
}
====FAQs======================================================
1. What is local variable?
A. Variable created inside a method, we cant use it outside of 
   that method.

2. Is oa local variable?
class A{}
class B{
  void m1() {
    A oa = new A();
  }
  void m2(){
    sysout(oa); // not accessable
  }
}

3. Can we create a re-usable object using below format?
class A{}
class B{
  A oa = new A();
  void m1() {
   // A oa = new A();
  }
  void m2(){
    sysout(oa); // not accessable
  }
}
class C{
  void m3() {
    B ob = new B();
    A a1 =  ob.oa;
  }
}
*) There is no such direct re-usable object is created

4. When should we use Java Configuration?
A.
   I) If a class is pre-defined
  II) To create multiple objects

5. Can we use Java Config to create object 
	to programmer defined class?
A. YES. But better use Annotation config.
   use only for multiple object creation.

6. What is the diff b/w @Bean and @Component?
A.
   Both indicates object creation in Spring container
   @Component can be used only for our classes.
   @Bean can be used for pre-defined(even programmer-defined).

7. What is the diff b/w @Configuration and @Component?
A. Generally they are different.
  @Configuration says our class is not a normal clas.
  It is a input code to spring container. So, that container
  takes this class and configure objects based on @Bean annotations.

  @Component - indicates object to container for our classes.

8. Do we need to specify BasePackage for java Config?
A. No. It is only for our classes.

9. Can we use @Value with properties file in java Config?
A. No We can not use @Value, but we can read data from
    properties file.

10. What is Repeatable annotation (JDK 1.8)?
A. 
**************************************************************
*) For multiple Properties file also only one Environment is
  created. Here Environment interface, impl class : 
  StandardEnvironment(C)
*) We need to Autowire Environment object in java Config file
   and use getProperty("key") method to read one key value,
   which return in String format.

==========Example Java Config + Properties file ===========
1. Spring Bean
package com.app;

public class DriverManager {

	private String driverClass;
	private String url;

	public DriverManager() {
		super();
	}
	public String getDriverClass() {
		return driverClass;
	}
	public void setDriverClass(String driverClass) {
		this.driverClass = driverClass;
	}
	public String getUrl() {
		return url;
	}
	public void setUrl(String url) {
		this.url = url;
	}
	@Override
	public String toString() {
		return "DriverManager [driverClass=" + driverClass + ", url=" + url + "]";
	}

}
2. Properties file
---jdbc.properties---
my.driver=OracleDriver
my.url=jdbc:oracle:thin

3. Spring Java Config file
package com.app;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;

@Configuration
@PropertySource("classpath:jdbc.properties")
public class MyAppConfig {
	
	@Autowired
	private Environment env;

	//1 method = 1 object
	@Bean
	public DriverManager conObj() {
		DriverManager dm = new DriverManager();
		dm.setDriverClass(env.getProperty("my.driver"));
		dm.setUrl(env.getProperty("my.url"));
		return dm;
	}
}

4. Test class
package com.app;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class MyTest {

	public static void main(String[] args) {
		ApplicationContext ac = new AnnotationConfigApplicationContext(MyAppConfig.class);
		Object ob = ac.getBean("conObj");
		System.out.println(ob);
		
	}
}

			Date : 06-09-2022
		Spring Boot and Microservices
		         Mr. Raghu
			 (ASHOK IT)
	-----------------------------------------------
@Autowired :- To read object from container and link with current
		class object. [Link two object]
1. If 1 Dependency object is found , then link objects
2. If Zero Dependency objects found,
	NoSuchBeanDefinitionException
   We can use @Autowired(required=false)
        null value
-----------------------------------------
3. Multiple Dependency beans
 3.1 If Multiple Beans/Objects found
   NoUniqueBeanDefinitionException: Found multiple, expected one
 3.2 If multiple beans found, container will compare
       ReferenceVariableName = child Object Name
       DependencyName == Independent Bean name
 3.3 Selecting one Independent Bean name manually using 
	@Qualifier("objNameToBeInjected")
   If @Qualifier is used but still Bean name is not found
       NoSuchBeanDefinitionException
 3.4 Container can provide one default bean for injection
     using @Primary. Incase multiple Independent Beans found
     and having 1 object with @Primary then it is 1st priority.

     Still we can select another bean using @Qualifier to avoid
     @Primary Bean.
==========================================================
To rename a local variable at a time in all places
=> select variable => alt+shift+R => Enter new name => Press Enter key


===Full example=====================================
1. Spring Bean
package com.app;

public class MyRepository {

	private String code;

	public MyRepository() {
		super();
	}

	public String getCode() {
		return code;
	}

	public void setCode(String code) {
		this.code = code;
	}

	@Override
	public String toString() {
		return "MyRepository [code=" + code + "]";
	}
	
	
}
---
package com.app;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class MyService {
	
	@Autowired
	//@Qualifier("m2")
	private MyRepository repo;

	@Override
	public String toString() {
		return "MyService [repo=" + repo + "]";
	}
	
	
}

2. Spring Config class
package com.app;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;

@Configuration
@ComponentScan("com.app")
public class MyAppConfig {

	//1 method = 1 object
	@Bean
	@Primary
	public MyRepository m1() {
		MyRepository m1 = new MyRepository();
		m1.setCode("A");
		return m1;
	}
	
	@Bean
	public MyRepository m2() {
		MyRepository m2 = new MyRepository();
		m2.setCode("B");
		return m2;
	}
}

3. Test class
package com.app;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Test {

	public static void main(String[] args) {
		ApplicationContext ac = new AnnotationConfigApplicationContext(MyAppConfig.class);
		Object ob = ac.getBean("myService");
		System.out.println(ob);
	}
}
================================================================
****************************************************************
		Spring Bean Scope
****************************************************************
================================================================
Scope :- It indicates variable/object access limits/life time.

In Core Java:
=> Local Scope  [Block Scope]
=> Instance/Object Scope [Object creation to destroy]
=> Static Scope [clas loading to unloading]

In Adv Java (servlets)
1. Page Scope (JSP)
2. Request Scope  (Until Response given)
3. Session Scope (Login -- Logout)
4. Application / Context Scope (Server starup / stop)


In Spring :
1. singleton (default scope)
	One Object is created by Spring container per configuration
	 1 <bean> = 1 object = 1 @Bean = 1 @Component
Ex:
  <bean id="a1" class="A" ..
  <bean id="a2" class="A" ..

2. prototype : Creates new object on every access.
3. request (WEB APP) : Create one new object when request comes to server
4. session (WEB APP) : Creates one new object when session is created/login sucess.

Q) Are singleton scope and singleton class same?
A) No.
   singleton class is a design pattern that allows 
   only one object for one class

   singleton scope is designed for Spring F/w only.
   container creates one object for 1 configuration.

Q) Which one is the default scope in Spring f/w?
A) singleton is the default.

==========Code Samples=================================
1. XML Config
<bean id="" class=""  scope="____" >
</bean>

2. Java Config
//  1 method = 1 object
 @Bean
 @Scope("__________")
 public <className> <objName>() {  ... return .... }

3. Annotation Config
 @Component
 @Scope("_____")
 class ______{ }

			Date : 08-09-2022
		Spring Boot and Microservices
		         Mr. Raghu
			 (ASHOK IT)
	-----------------------------------------------
Spring Scope : (4) 
Lifetime/ accessable time / how long does it exist in memory.
1. singleton (default /longest)
2. prototype (new object on every access from container)
3. request [Spring WEB] 
 (Create object on request and maintain until response)
4. session [Spring WEB] : on login user (per session) create
		object and destroy on logout.

Note:
1. Scope names are reserved words and they are case-sensitive
   singleton, prototype, request, session

2. In case of XML Configuration we need to provide scope at bean tag
  Like:
  <bean id="" class="" scope=""> .. </bean>

3. In case of Annotation/ Java Config we should use annotation
      @Scope("______")

4. For one Bean Configuration , scope must be given only once.

===================XML EXAMPLE -- Spring Bean Scope ==========
1. Spring Bean
package com.app.raghu;

public class Token {

	private String code;

	public Token() {
		super();
	}

	public String getCode() {
		return code;
	}

	public void setCode(String code) {
		this.code = code;
	}

	@Override
	public String toString() {
		return "Token [code=" + code + "]";
	}
	
	
}

2. Spring XML Config File
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


	<bean 
		id="t1" 
		class="com.app.raghu.Token"
		scope="prototype"
		>
		<property name="code" value="SAMPLE"/>
	</bean>
</beans>

3. test class
package com.app.raghu;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Test {

	public static void main(String[] args) {
		ApplicationContext ac = new ClassPathXmlApplicationContext("/myconfig/beans.xml");
		//Reading object from container
		Token tob1 = ac.getBean("t1",Token.class);
		System.out.println(tob1.hashCode());
		
		//Reading object from container
		Token tob2 = ac.getBean("t1",Token.class);
		System.out.println(tob2.hashCode());
	}
}
============================================================
	Spring Bean Scope Annotation Config
*************************************************************
1. Spring Bean
package com.app.raghu;

import java.util.Random;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

@Component("t1")
//@Scope("singleton")
@Scope("prototype")
public class Token {

	private int code;

	public Token() {
		super();
		code = Math.abs( new Random().nextInt() );
	}

	@Override
	public String toString() {
		return "Token [code=" + code + "]";
	}
	
	
	
}

2. Spring Config class
package com.app.raghu;

import org.springframework.context.annotation.ComponentScan;

@ComponentScan("com.app.raghu")
public class AppConfig {

}

3. Test class
package com.app.raghu;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Test {

	public static void main(String[] args) {
		ApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);
		Token ta1  = ac.getBean("t1",Token.class);
		System.out.println(ta1);
		Token ta2  = ac.getBean("t1",Token.class);
		System.out.println(ta2);
	}
}
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	Spring bean -- Java Config Example
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
1. Spring Bean
package com.app.raghu;

import java.util.Random;

//@Component("t1")
//@Scope("singleton")
//@Scope("prototype")
public class Token {

	private int code;

	public Token() {
		super();
		code = Math.abs( new Random().nextInt() );
	}

	@Override
	public String toString() {
		return "Token [code=" + code + "]";
	}
	
	
	
}

2. Spring Config class
package com.app.raghu;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;

//@ComponentScan("com.app.raghu")
@Configuration
public class AppConfig {

	//1. Bean = 1 Method
	@Bean
	@Scope("prototype")
	public Token t1() {
		return new Token();
	}
	
}

3. Test class
package com.app.raghu;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Test {

	public static void main(String[] args) {
		ApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);
		Token ta1  = ac.getBean("t1",Token.class);
		System.out.println(ta1);
		Token ta2  = ac.getBean("t1",Token.class);
		System.out.println(ta2);
	}
}
*************************FAQs*********************************
1. What is the default scope in Spring F/w?
A. singleton

2. Is Spring container EAGER/LAZY by default in Bean Creation?
A. If the scope is set to singleton then such beans are created
   while creating spring container (ie EAGER LOADING)

   If the scope is set to prototype then such beans are created
   after creating spring container, when we try to read object
   from container (getBean) (ie LAZY LOADING).

3. How can we force container to behave Lazy for singleton beans?
A. We need to add one annotation @Lazy over Bean Config.

ex:
@Component("t1")
@Lazy
public class Token { ... }

ex:
<bean id="" class="" scope="" lazy-init="true" > </bean>

4. When should we go for singleton / prototype?
A. Based on requirement.
  If we want one object for a config , then use singletion
   else go for prototype
Ex:
  DatabaseCon -- 1 object is fine so goto singleton
  OTP         -- need different object every time -- prototype

5. When should we go for Lazy?
A. LAZY creates object on first access (for singleton)
   To avoid all objects creation while container creation
   ( a type of memory saving )
   but finally object is created (on first access)
Gmail ---Ex
 InboxService (EAGER/singleton)
 DraftService (LAZY/Singleton)

6. How can we convert prototype Loading to EAGER?
A. No. We can not convert Prototype object scope (or)
   LAZY Loading to EAGER.
   No Such annotation like EAGER.

7.*** What is load-on-startup in Servlets?
   (or) Explain Eager and Lazy Loading in Servlets?
	( javabyraghu@gmail.com )

8. How can we provide two scopes for a same bean?
A. We can never provide multiple scopes for a single/same bean.

9. Is Below code valid? how many objects created?
 (Using Both Java and Annotation Config at a time)

@Component("oa")
public class A{ 
  @Value(20)
  int code;
}
-------------
@Configuration
public class AppConfig {
  @Bean
  public A oa() {
    A a1 = new A();
    a1.setCode(10);
    return a1;
  }
}

A. __________________________________

10. Also try above code with Scopes (singleton/prototype)...
11. Also use Loadings in different way.


			Date : 09-09-2022
		Spring Boot and Microservices
		         Mr. Raghu
			 (ASHOK IT)
	-----------------------------------------------
Setter Injection (SI) : Creating object using default constructor and
	provide data using set method

Constructor Injection (CI): Creating object and provide data using
	parameterized constructor.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
LookUp Method Injection (LMI)  Problem Statement:-
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
 If Dependency bean is prototype and dependent bean is singleton
 then expected output may not come.

 If child is Prototype Scope and Parent is singleton scope then
 expected output may not come.

 If Dependent bean is singleton (Parent is singleton)
 and Dependency bean is prototype (child is prototype)
 then Spring container creating first time both object and linked them.
 When we request to read object 2nd time (getBean) then new child 
 object is created. But link is not updated with parent (singleton) bean.


*** Hint: Independent is prototype, dependent is singleton.

====LMI : Problem Application Code =======================
1. Spring Bean
package com.app.raghu.service;

import java.util.Random;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

@Component
@Scope("prototype")
public class Token {

	private int code;

	public Token() {
		super();
		code = Math.abs(new Random().nextInt());
	}

	@Override
	public String toString() {
		return "Token [code=" + code + "]";
	}
	
	
}
-----------
package com.app.raghu.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

@Component
@Scope("singleton")
public class TokenService {

	@Autowired
	private Token token;

	public Token getToken() {
		return token;
	}

	@Override
	public String toString() {
		return "TokenService [token=" + token + "]";
	}
	
}

2. Spring Config class
package com.app.raghu.config;

import org.springframework.context.annotation.ComponentScan;

@ComponentScan("com.app.raghu")
public class AppConfig {

}

3. test class
package com.app.raghu.test;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import com.app.raghu.config.AppConfig;
import com.app.raghu.service.Token;
import com.app.raghu.service.TokenService;

public class Test {
	
	public static void main(String[] args) {
		ApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);
		//reading first time
		TokenService ts1 = ac.getBean("tokenService",TokenService.class);
		Token tk1 = ts1.getToken();
		System.out.println(tk1);

		//reading 2nd time
		TokenService ts2 = ac.getBean("tokenService",TokenService.class);
		Token tk2 = ts2.getToken();
		System.out.println(tk2);

		//reading 3rd time
		TokenService ts3 = ac.getBean("tokenService",TokenService.class);
		Token tk3 = ts3.getToken();
		System.out.println(tk3);
	}

	public static void main1(String[] args) {
		ApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);
		//reading first time
		TokenService ts1 = ac.getBean("tokenService",TokenService.class);
		Token tk1 = ts1.getToken();
		System.out.println(ts1.hashCode() + " " + tk1.hashCode());

		//reading 2nd time
		TokenService ts2 = ac.getBean("tokenService",TokenService.class);
		Token tk2 = ts2.getToken();
		System.out.println(ts2.hashCode() + " " + tk2.hashCode());

		//reading 3rd time
		TokenService ts3 = ac.getBean("tokenService",TokenService.class);
		Token tk3 = ts3.getToken();
		System.out.println(ts3.hashCode() + " " + tk3.hashCode());
	}
}

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
LookUp Method Injection (LMI)  Solution Statement:-
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
*) Here, programmer can not handle memory related operations in
   Spring/Java. It is handled by Spring f/w only.

  But we need to follow below steps in Dependent class/Parent class.
  (In child class / Dependency class no code changes)

1. Define one method that return child/Dependency class 
  (with no body , just return null)

2. Add @Lookup Annotation over method

3. Call such method in getter or toString ...(some where)

===LIM : Solution code -- Only changes at parent class ===
1. Spring Bean code
package com.app.raghu.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Lookup;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

@Component
@Scope("singleton")
public class TokenService {

	@Autowired
	private Token token;

	public Token getToken() {
		token = getMyToken();
		return token;
	}
	
	@Lookup
	public Token getMyToken() {
		//....
		return null;
	}

	@Override
	public String toString() {
		return "TokenService [token=" + token + "]";
	}
	
	
}
=============================================================
Q) What is Reflection API?

Q) Write a Java code that takes one class name as input
   and output is
   No of variables in class
   No of constructor in class
   No Methods in class
   No of Inners in class

Q) What is Annotation and how it works (Annotation Processor class).
=====================================================================
Q) What is LMI and When to use?
A. Lookup Method Injection.
  If Parent/Dependent class is singleton and child/dependency class is
  prototype then we need LMI.

Q) Steps to Implement LMI?
A. Only code changes comes at parent/Dependent class

1. Define one method that return child/Dependency class 
  (with no body , just return null)
2. Add @Lookup Annotation over method
3. Call such method in getter or toString ...(some where)

Q) How LMI concept works internall?
A. Internally Spring F/w works on memory level that generates some
   setter method similer code which checks for new child object link
   using CGLIB : Code Generator Library.
   This process is present at Lookup Service given by Spring f/w.

Ref Doc (API)
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Lookup.html
Ref Doc (HTML)
https://docs.spring.io/spring-framework/docs/current/reference/html/

=======================================================================
*) If we apply @Autowired over an interface variable then container
  checks for its Impl class object and try to inject it.

  ie Create object from independent class to next level dependent class
  object and link them, known as Spring Container / Spring IOC.


*) @Autowired annotation can be used over field/variable, constrcutor
  and set method.

Ex:
	@Autowired // Field Injection
	private Token token;

Ex:
	@Autowired // setter injection
	public void setToken(Token token) {
		this.token = token;
	}

Ex:
	@Autowired // Constrcutor Injection
	public TokenService(Token token) {
		super();
		this.token = token;
	}
====================================================================


			Date : 11-09-2022
		Spring Boot and Microservices
		         Mr. Raghu
			 (ASHOK IT)
	-----------------------------------------------
Q) What is coupling? How many types are there?
Q) Why Coupling?
Q) What is tight coupling?
Q) What is loose coupling?
------------------------------------------------------------
@Autowired : Link Objects (Read object from container and
   link with current class )

*) If Reference Variable Type is interface then Spring container
  will search for its implementation class object.

===Example : Autowired Complex Case ====================
1. Spring Bean
package com.app.raghu;

public interface IProcess {

	public void getProcesCode() ;
}
--------
package com.app.raghu;

import org.springframework.stereotype.Component;

@Component
public class AdvProcessImpl 
	implements IProcess {

	@Override
	public void getProcesCode() {
		System.out.println("P2");
	}

}
---------
package com.app.raghu;

import org.springframework.context.annotation.Primary;
import org.springframework.stereotype.Component;

@Component
@Primary
public class ProcessImpl 
	implements IProcess {

	@Override
	public void getProcesCode() {
		System.out.println("P1");
	}

}
---------
package com.app.raghu;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class Format {
	@Autowired
	private IProcess pob;
	
	public void printFormat() {
		pob.getProcesCode();
		System.out.println("FROM FORMAT");
	}
}

2. Spring config class
package com.app.raghu;

import org.springframework.context.annotation.ComponentScan;

@ComponentScan("com.app.raghu")
public class AppConfig {

}

3. Test class
package com.app.raghu;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Test {

	public static void main(String[] args) {
		ApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);
		Format fob = ac.getBean("format",Format.class);
		fob.printFormat();
	}
}

========================================================
@Qualifier > @Primary > Name Matching (ref Name = child objName)

*) We can not use same bean name for multiple objects creation
 If we use then container throws Exception:
   ConflictingBeanDefinitionException


			Date : 12-09-2022
		Spring Boot and Microservices
		         Mr. Raghu
			 (ASHOK IT)
	-----------------------------------------------
SpEL (Spring Expression Language):-

=> an Expression is a combination of operators and operands
  that returns finally one value, once it gets executed.
ex:
    a + b x 2

=> SpEL expression is created using : operators, variables,
   class/objects, method calls...etc returns finally one value

Arithmetic  : +, -, *, /, %, ^, div, mod
Relational  : <, >, ==, !=, <=, >=, lt, gt, eq, ne, le, ge
Logical     : and, or, not, &&, ||, !
Conditional : ?:

=> @Value Annotation
1. HardCoding value : @Value("   ")
2. Reading data from external resources  : @Value(" ${ } ")
3. SpEL : Execute one expression : @Value(" #{ } ")

**) SpEL Supports Link objects using:
	@Value("#{childObjName}")
======================================================
1. We must enclose our Expression inside #{  }
2. To indicate String use single quotes ex:  'hello'
3. To call instance method we need object/reference
Ex:
  @Value(" new java.util.Random().nextInt() ")

  @Component("sob")
  class Sample {
     @Value("88")
     int id;
  }

 // in some other class 
 @Value("#{ sob.id % 10}")   ---> equals to sob.getId()
 @Value("#{ sob.id mod 10}")

4. To call static method first specify that it is a type
     T(ClassName).methodName()

=======Example : code SpEL  ===========================
1. Spring Beans
package com.app.raghu;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Component
public class ModelData {

	@Value("TEST")
	private String model;

	public ModelData() {
		super();
	}

	@Override
	public String toString() {
		return "ModelData [model=" + model + "]";
	}

	public String getModel() {
		return model;
	}

	public void setModel(String model) {
		this.model = model;
	}

}
----------------
package com.app.raghu;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Component
public class Process {
	
	//@Value("#{ 2 + 3 }")
	//@Value("#{ 'Hello ABC'.length()  }")
	//@Value("#{ new java.util.Random().nextInt() }")
	//@Value("#{ T(java.lang.Math).abs(-9)}")
	//@Value(" #{ T(java.lang.Math).abs( new java.util.Random().nextInt() ) }")
	//@Value(" #{ 'Hello'.length() > 0 ? 55 : 44 }")
	//@Value(" #{ modelData.model.length() }")
	@Value(" #{ modelData.model.toLowerCase() }")
	private String code;
	
	//@Value("#{ false }")
	//@Value(" #{ new java.util.Random().nextInt() > 5 ? true:false}")
	//@Value(" #{ new java.util.Random().nextInt() > 5 }")
	//@Value(" #{ new java.util.Random().nextInt() ge 5 }")
	//@Value(" #{ 5 % 2 > 0 && 2 + 3 le 5  }")
	@Value(" #{ 5 % 2 > 0 and 2 + 3 le 5  }")
	private boolean isPresent;

	@Override
	public String toString() {
		return "Process [code=" + code + ", isPresent=" + isPresent + "]";
	}

	
	
}

2. Spring Config code
package com.app.raghu;

import org.springframework.context.annotation.ComponentScan;

@ComponentScan("com.app.raghu")
public class AppConfig {

}

3. test class
package com.app.raghu;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Test {

	public static void main(String[] args) {
		ApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);
		Process p = ac.getBean("process",Process.class);
		System.out.println(p);
	}
}
==============================================================
Q) Write SpEL for below concepts!

1. String to char[]

@Value(" #{ modelData.model.toCharArray() }")
private char[] data;

@Value(" #{ 'Hello Users!'.toCharArray() }")
private char[] data;
	

2. String to byte[]

@Value(" #{ modelData.model.getBytes() }")
private byte[] arr;

@Value(" #{ 'Hello Users!'.getBytes() }")
private char[] data;

3. Any type to Stream
 
@Value("#{modelData.model.lines()}")
private Stream<String> stream;
===============================================================
Circular Dependency:-
It is handled by Spring F/w only. It takes care of creating objects
and linking them in below order.

1. Create objects using default constrcutor
2. Call set methods to link Objects.
ex:
 class A{  B ob; }
 class B{ A oa; }

Then container will do
  A a1 = new A();
  B b1 = new B();
  a1.setOb(b1);
  b1.setOa(a1);

*) If we define toString methods in both classes and we try to
  print object/reference then it may leads to Error:

========Code======================
1. Spring Bean
package com.app.raghu;

public class Employee {

	private String name;
	
	private Project pob;
	
	public Employee() {
		super();
		System.out.println("EMPLOYEE OBJ");
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Project getPob() {
		return pob;
	}

	public void setPob(Project pob) {
		this.pob = pob;
		System.out.println("EMPLOYEE.setProject ");
	}

	@Override
	public String toString() {
		return "Employee [name=" + name + ", pob=" + pob + "]";
	}

	
	
}
------------
package com.app.raghu;

public class Project {

	private String pcode;
	
	private Employee eob;
	
	
	public Project() {
		super();
		System.out.println("PROJECT OBJ");
	}

	public String getPcode() {
		return pcode;
	}

	public void setPcode(String pcode) {
		this.pcode = pcode;
	}

	public Employee getEob() {
		return eob;
	}

	public void setEob(Employee eob) {
		this.eob = eob;
		System.out.println("PROJECT.setEmployee ");
	}

	@Override
	public String toString() {
		return "Project [pcode=" + pcode + ", eob=" + eob + "]";
	}

	
	
	
}

2. config.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="e1" class="com.app.raghu.Employee">
    	<property name="name" value="RAJU"/>
    	<property name="pob">
    		<ref bean="p1"/>
    	</property>
    </bean>

	<bean id="p1" class="com.app.raghu.Project">
		<property name="pcode" value="HTED"/>
		<property name="eob">
			<ref bean="e1"/>
		</property>
	</bean>
</beans>

3. test class
package com.app.raghu;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Test {

	public static void main(String[] args) {
		ApplicationContext ac = new ClassPathXmlApplicationContext("config.xml");
		Employee e = ac.getBean("e1",Employee.class);
		System.out.println(e);
	}
}

TASK : Define above Configuration using Spring Annotations
	@Component and @Autowired.
=============================================================


			Date : 13-09-2022
		Spring Boot and Microservices
		         Mr. Raghu
			 (ASHOK IT)
	-----------------------------------------------
		Spring Core : Scheduling

*) Scheduling: Executing a task in a loop over PERIOD of TIME
    or POINT of TIME.

Ex:
1. EMI Alerts
2. Databackups
3. Bank Statement
4. Notifications
5. Payslip Generation

*) PERIOD of TIME : Time gap 
Ex: 30 mins, 5 days, 2 years..etc
*) POINT of TIME  : Exact Date/Time
Ex: 10PM -- Generate Report
    31st Dec -- Backup.

============================================================
*) To implement Scheduling in Spring, we need to use 
1. @EnableScheduling over config class
2. @Scheduled over method (public void ____() { //code  } )
** Scheduler methods are executed by container in a loop.

@Scheduled: Takes 3 types of inputs
a. fixedDelay : 
 Exact time gap b/w last method finish to next method call/start

b. fixedRate : 
  Exact time gap b/w last method call to next method call

c. cron *** : POINT of TIME (Linux OS Based Date/Time)

--------Example--------------------------------
1. Spring Bean
package com.app.raghu;

import java.util.Date;

import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Component
public class ProductReportService {
	
	//@Scheduled(fixedDelay = 2000) //in milli sec
	//@Scheduled(fixedDelayString = "2000") //in milli sec
	@Scheduled(fixedRate = 2000)
	public void generateReport() {
		System.out.println("HELLO " + new Date());
	}
}

2. Spring Config class
package com.app.raghu;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.scheduling.annotation.EnableScheduling;

@ComponentScan("com.app.raghu")
@EnableScheduling
public class AppConfig {

}

3. Test class
package com.app.raghu;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Test {

	public static void main(String[] args) {
		ApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);
		//ProductReportService ps = ac.getBean("productReportService",ProductReportService.class);
		ProductReportService ps = ac.getBean(ProductReportService.class);
		
	}
}

*) Method execution time may not be same for multiple calls.
 ie if a method is called multiple time, then it may take
  different time/gaps to finish execution.

====================================================
Q) What is the diff b/w fixedDelay and fixedRate?
A) fixedDelay provides exact time gap to start next call
   counting from last method finish time.
   fixedRate includes even task execution time, if method/task
   execution time is more than rate then wait time is ZERO.

******************************************************************
    -=-=-=-=-=-=-=-=-=-=-=-= CRON =-=-=-=-=-=-=-=-=-=-=-=-=-=-
******************************************************************
It is from Linux OS, indicates task/JOB execution based on
date/time.

cron = SEC   MIN    HRS   DAY   MONTH   WEEKDAY
      0-59  0-59   0-23  1-31   1-12     SUN-SAN 1-7 / 0-7

Symbols Like
 *  = all/any
 -  = Range
 ,  = set of possible values
 ?  = any (used in DAY and WEEKDAY when Month is provided)
===Expressions========================================================
1. cron = 0 0 9 * * *
=> Execute task every day at 9:00:00 AM

2. cron = 0 0 18 * * *
=> Execute task every day at 6:00:00 PM

3. cron = 0 0 9 10 * *
=> Execute task on every month 10th day at 9:00:00AM

4. cron = 0 30 * * * *
=> Execute task on every hour 30th min only.
  [not 30 mins gap]
7:55 AM -- App Started
8:30:00 --1st task executed
9:30:00 -- 2nd task executed
10:30:00 ...

5. cron = 10 * * * * *
=> execute task on Every minute, 10th sec 
	[it is not 10sec gap, at 10th sec of minute]
ex:
  7:56:10
  7:57:10
  7:58:10
  7:59:10
  8:00:10

6. cron = */10 * * * * * (Symbol 1 indicate period of time)
for every 10 sec gap

--Example code-------
package com.app.raghu;

import java.util.Date;

import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Component
public class ProductReportService {
	
	
	//@Scheduled(cron = "10 * * * * *")
	@Scheduled(cron = "*/10 * * * * *")
	public void generateReport() {
		System.out.println("HELLO " + new Date());
	}
}
---------------------------------------------------
7. cron = 0  0  9  10 * *     (on 10th of every month)
   cron = 0  0  9  */10 * *  (For every 10 days gap)

8. cron = 59  59 23  * * *
=> Execute task every day 11:59:59 PM (1sec before to 12 AM)

9. cron = 0 0 9 * 3 * (wrong format)
          0 0 9 ? 3 ?

 If month is provided and you want to specify all day/week day
 then use ? symbol.

Ref Doc:
https://spring.io/blog/2020/11/10/new-in-spring-5-3-improved-cron-expressions



			Date : 14-09-2022
		  Spring Boot and Microservices
		           Mr. RAGHU
			   (ASHOK IT)
        ------------------------------------------------------
AshokIT Admin : +91 630 192 1083
	            9985 29 6677
		    9986 39 6677
javabyraghu@gmail.com

Spring F/w : it used to develop web/distributed applications.

*) Configuration (XML/Java/Annotation) code is common for applications
Some Common Configuration:
1. Database Connection
2. Notifications/Alerts
3. Security/User Operation
..etc

--Ex Spring XML Configuration Code for Database Connection -----
<bean id="dbCon" class="DriverManagerDataSource">
  <property name="driverClassName" value="OracleDriver"/>
  <property name="url" value="jdbc:oracle:thin.."/>
  <property name="username" value="raghu"/>
  <property name="password" value="ashokIT"/>
</bean>
===========================================================
*) Spring Boot : It is defined using Spring F/w. 
  It reduces common configuration compared to Spring F/w.

=> Pivotal Team has provided one parent project "Spring Boot"
 which has pre-defined configuration code (AutoConfiguration)
 in Jars format.

=> We must create one child project and link to parent.
=> Project must be created using either Maven or Gradle.


--Ex Spring Boot Database Connection-------------
1. Child Project / Spring boot starter project
2. Maven -- pom.xml / Gradle -- build.gradle
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-jdbc</artifactId>
</dependency>

implementation 'org.springframework.boot:spring-boot-starter-jdbc:2.7.3'

3. application.properties
driver=Oracle
url=jdbc:oracle:thin
username=raghu
password=ashokIT


*) Note: Pre-defined configurartion code exist in jar files
those naming format looks like:
   spring-boot-starter-[some name]

Ex:
spring-boot-starter-mail
spring-boot-starter-web
spring-boot-starter-security
spring-boot-starter-aop
spring-boot-starter-jdbc
spring-boot-starter-data-jpa
..etc
Ref:
https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using.build-systems.starters

1. Spring F/w : Web Apps (Spring MVC)
   Spring Boot : ReSTFul Webservices (Microservices/Spring Cloud)

2. Spring boot provided embedded servers : Tomcat, Jetty, Undertow
  [netty -- reactive programming -- Spring Webflux]

3. Spring boot provided embedded databases: H2, HSQL, Derby 
	[not recomanded in production] (Dev/Test Env)

4. Spring Boot never support working with XML Configuration
   (Parsing, executing ... slow)
   We work using Java and Annotation Configuration.

5. No EJB/.ear in Spring boot.

6. Actuator : Production ready endpoints

7. Scaling (Up/Down) supported

8.** FrontEnd (Angular/ReactJS) + Backend (Spring boot) + Cloud
  JSON (JACKSON) Global Data format is supported.

9. YAML/Properties both inputs are supported by Spring boot.
ex:
application.properties
------------------------
spring.datasource.driver-class-name=Oracle
spring.datasource.url=jdbc:oracle:thin:...
spring.datasource.username=raghu
spring.datasource.password=ashokIT

application.yml
------------------------
spring:
  datasource:
     driver-class-name: Oracle
     url: dbc:oracle:thin:...
     username: raghu
     password: ashokIT

*) Spring boot has provided pre-defined keys set
https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.mail

Q) .yml or .yaml ?? which one is valid?
A) Both. in Spring Boot we use .yml only.
   K8s --> .yaml
=============================================================
.jar = java archive  (.class files)
.war = web archive  (.class + html/css/js ...etc)

Web / Rest in Spring Boot -- JAR ( Code + Embedded Server)
                          -- WAR (Code --> Run in external server)

*) https://start.spring.io/
  This website (even used by IDEs) supports creating spring boot
  application with initial setup.


			Date : 15-09-2022
		  Spring Boot and Microservices
		          Mr. Raghu
                          (ASHOK IT)
------------------------------------------------------------------
@Component @Value @ComponentScan
@Autowired  @Scope
@Configuration @Bean @PropertySource

AshokIT Admin : +91 630 192 1083
	            9985 29 6677
		    9986 39 6677
Email: javabyraghu@gmail.com


Spring Boot:-
1. AutoConfiguration (Pre-defined configuration code -- Java Config)
2. No XML Configuration supported
3. Frontend (Angular/ReactJS) + Backend (Spring Boot)
   Spring Boot ReST Webservices + Microservices/Spring Cloud

** Spring Cloud:(Coding) To Develop application using Microservices
** AWS Cloud :(Run) To Deploy application

** Spring boot supports even MVC (Model - View [JSP/Thyemeleaf] - Controller)
 Model - Data
 View  - Display / UI/UX
 Controller - class/request processing code

4. Tools : maven - pom.xml / gradle - build.gradle
5. Embedded Servers - Tomcat**, Jetty and Undertow
6. Embedded Databases - H2, HSQL, Derby (Test/Dev Env)
7. Packing/ build models - .jar / .war
8. Parent Project (spring-boot-starter-parent) exist for
   every spring boot application.
   It takes care of versions of dependecies.

*) JAR : Java Archive ( .class files )
  A.java , B.java --> compile --> A.class B.class --build-> Sample.jar

   WAR : Web Archive ( .class + HTML/CSS/JS...)
           (Used for web applications)

9. Maven Plugins: That gives additional task/works can be executed
      Compiler plugin -- Supports updating JDK/JRE version
      Build Plugin  -- Supports converting jar/war
===============================================================
Spring Boot Application Files:
1. Starter class:
 This one creates spring container (ApplicationContext)
 with all required objects and setup.

 It is a simple main() class. 
 The actual logic is present in : SpringApplication.run() method

2. Input file : key=val pairs
=> This is used to provide key:val pairs as input to Spring container

1. application.properties
server.port=9898

2. application.yml
server:
  port: 9898

*) We can add two types of keys,
 Pre-defined and programmer-defined/user defined
Pre-defined keys Ref Link:
https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.web

3. Build File
-> Parent Project Details
-> Our Project Details
-> Properties (Java version, Spring cloud version..etc)
-> Dependencies (Jars)
-> plugins (Compiler, Build, SonarQube , JACOCO..etc)

==============================================================
Required S/w
JDK : 17/11
https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html
STS : Spring Tool Suite
> Download and double click to Extract
https://spring.io/tools

===============First Application Steps =======================
1. File > new > Spring Starter Project
2. Provide details
 Name    : SpringBootFirstApp
 Version : 1.0
 package : com.app.raghu

3. Next > select Dependencies (Spring web) > next > finish

*) When we click on finish button STS makes request to 
 https://start.spring.io/ website that gives spring boot
 application with setup

Example Req:
https://start.spring.io/starter.zip?
name=firstapp
& groupId=com.app.raghu
& artifactId=firstapp
& version=1.0
& description=Demo+project+for+Spring+Boot
& packageName=com.app.raghu
& type=maven-project
& packaging=jar
& javaVersion=17
& language=java
& bootVersion=2.7.3

===Test application=====================
1. Create one new application
2. Choose Dependency : Spring web
3. application.properties
   server.port=9696
4. Open Main class > Right click > Run as > Spring Boot application
5. Goto Browser and enter URL
http://localhost:9696/

			Date : 16-09-2022
		  Spring Boot and Microservices
		            Mr. Raghu
                           (ASHOK IT)
	-----------------------------------------------------
Spring Boot Runners:-
 To execute any Logic only once by Spring Container 
 on application startup / while starting application.

1. Testing Objects (Created or not?)
2. Loding Database Scripts( Create, alter..etc)
3. Start Batch Processing (Ex: CSV/Excel File ---> Database)
4. Root user creation/Roles setup.

=================================================================
ctrl + Shift + T 

--API Details -----------
package: org.springframework.boot
interface CommandLineRunner 
method:
	void run(String... args) throws Exception;
--------------------------
Coding Steps:
1. Define one class and add @Component 
2. implement CommandLineRunner and override run() method
3. Define your logic inside run method.

Note:
1. We can define multiple runners in one application
2. They are executed in naming order.
3. We can provide our own order using @Order(int) annotation
  If no annotation @Order is provided then default value is
  Integer.MAX_VALUE (2147483647)
4. If multiple Runners are having same order then again naming
   rule is applied.

========Code ==============================================
1. Create application
> File > new > Spring Starter Project
Name : 01SpringBootCoreRunnerEx
Package : com.app.raghu
> Next > Finish

2. Spring Bean classes
package com.app.raghu.runner;

//ctrl+shift+O
import org.springframework.boot.CommandLineRunner;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

@Component
@Order(5)
public class MessageRunner implements CommandLineRunner {

	@Override
	public void run(String... args) throws Exception {
		System.out.println("MESSAGE RUNNER.");
	}
}

----
package com.app.raghu.runner;

import org.springframework.boot.CommandLineRunner;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

@Component
@Order(15)
public class DatabaseConRunner implements CommandLineRunner {

	@Override
	public void run(String... args) throws Exception {
		System.out.println("DATABASE CON RUNNER");
	}
}
---
package com.app.raghu.runner;

import org.springframework.boot.CommandLineRunner;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

@Component
@Order(10)
public class EmailConfigRunner implements CommandLineRunner {

	@Override
	public void run(String... args) throws Exception {
		System.out.println("EMAIL CONFIG.");
	}
}
==============================================================
Ex:
ARunner  -- @Order(12)
BRunner  -- @Order(44)
CRunner  -- @Order(-98)
DRunner  -- @Order(-101)
ERunner  --  No External Order value is provided
FRunner  --  No External Order value is provided

Execution Order of Above Runners:-
D  C  A  B  E  F

***************************************************************
1. @Component -- creates object in Container
2. @Value("${key}") -- reads data from input file (application.properties)
3. @Autowired -- Read and link object from container to current class
4. Here no need to add @PropertySource (like Spring Core)
   to load application.properties file 

--Spring Core Ex----------------
@PropertySource("classpath:application.properties")
@ComponentScan("com.app.raghu")
public class AppConfig {}
---------------------------------

=========Spring Boot Core Example # 2 (Properties file ) ======
1. Spring Bean
package com.app.raghu;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Component
public class DatabaseCon {
	
	@Value("${my.db.driver}")
	private String driver;
	
	@Value("${my.db.url}")
	private String url;
	
	@Value("${my.db.usr}")
	private String user;
	
	@Value("${my.db.pwd}")
	private String password;
	
	@Override
	public String toString() {
		return "DatabaseCon [driver=" + driver + ", url=" + url + ", user=" + user + ", password=" + password + "]";
	}
	
	
}

2. application.properties
#Our own keys
my.db.driver=Oracle
my.db.url=jdbc:oracle:thin:XYZ
my.db.usr=root
my.db.pwd=sample

3. Runner class
package com.app.raghu;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

@Component
public class TestObjRunner implements CommandLineRunner {
	
	@Autowired
	private DatabaseCon con;

	@Override
	public void run(String... args) throws Exception {
		System.out.println(con);
	}
}
===============================================================
***************************************************************
		@ConfigurationProperties
***************************************************************
===============================================================
@Value will try to read one key data and if found inject the
same into one variable, else key not found then container
throws exception like: IllegalArgumentException: 
Could not resolve placeholder 'my.db.driver' in value "${my.db.driver}"

-> If we have n variable to load n keys then we should define
   @Value over n variables.

-> @ConfigurationProperties loads all keys into matching variables
   at a time by writing this only one time per class
   with the help of prefix.

================================================================
*) Note:
1. @ConfigurationProperties will never throw any exception if
  keyname/variable name not matching or prefix is not matching
  or setters not found, all these cases variable holds default
  value (null/0/0.0/false)

But @Value("${key}") will throw exception if exact key is not matching

2. @Value follows case-sensitive, but not @ConfigurationProperties
 First priority is given to same case next chance is for nearest
 case.

ex: variable name password;
  check first key  my.app.password 
              else my.app.PASSWORD

====Code========================================================
1. Spring Bean
package com.app.raghu;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

@Component
@ConfigurationProperties("my.app")
public class DatabaseCon {

	private String driver;
	private String url;
	private String username;
	private String password;

	public String getDriver() {
		return driver;
	}
	public void setDriver(String driver) {
		this.driver = driver;
	}
	public String getUrl() {
		return url;
	}
	public void setUrl(String url) {
		this.url = url;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	@Override
	public String toString() {
		return "DatabaseCon [driver=" + driver + ", url=" + url + ", username=" + username + ", password=" + password
				+ "]";
	}
	
	
}

2. Runner class
package com.app.raghu;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

@Component
public class TestDbConRunner implements CommandLineRunner {

	@Autowired
	private DatabaseCon con;
	
	@Override
	public void run(String... args) throws Exception {
		System.out.println(con);
	}

}

3. application.properties
my.app.driver=OracleDriver
my.app.url=jdbc:oracle
my.app.username=system
my.app.password=testabc
#my.app.PASSWORD=ashok
=========================================================
javabyraghu@gmail.com
AshokIT Admin : +91 630 192 1083
	            9985 29 6677
		    9986 39 6677

TASK: EmailConfig (class)
       host (String)
       port (int)
       active (boolean)
       usr (String)

-> provide data in properties file using syntax: prefix.variable=val
-> Load them using : @ConfigurationProperties(prefix="___")
-> Define one runner class to read emailConfig object and print

  

			Date : 19-09-2022
		  Spring Boot and Microservices
		           Mr. Raghu
			   (ASHOK IT)
	--------------------------------------------------
Check This:
http://mageddo.com/tools/yaml-converter

@ConfigurationProperties [PART-2]:-
=> it takes default value if key is not found, setters not exist,
   prefix is not matched.

=> Variable type can be primitive, Collection, Reference.

-Collection-----------------------------
List / Array, Set, Map

List/Array, Set ---> prefix.variable[index]=value
Map/Properties --> Prefix.variable.mapKey=mapVal

------Reference Type----------------------
 prefix.refvariable.variable = value

*) Here we should not use @Component over child class and
   @Autowired over HAS-A variable when we are using
   @ConfigurationProperties.

   Why? @ConfigurationProperties creates object based on condition
   saying that if data is present (at least for one variable)
   then create object and link.


======Ex:2 =======================
1. Spring Bean
package com.app.raghu;

import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

@Component
@ConfigurationProperties("my.app")
public class MyServiceData {

	private int id;
	private String code;
	private boolean active;
	
	//private List<String> data; //ArrayList
	private Set<String> data; //LinkedHashSet
	//private String[] data; 
	
	private Map<String,String> info; //LinkedHashMap
	
	private Process pob;

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getCode() {
		return code;
	}

	public void setCode(String code) {
		this.code = code;
	}

	public boolean isActive() {
		return active;
	}

	public void setActive(boolean active) {
		this.active = active;
	}

	public Set<String> getData() {
		return data;
	}

	public void setData(Set<String> data) {
		this.data = data;
	}

	public Map<String, String> getInfo() {
		return info;
	}

	public void setInfo(Map<String, String> info) {
		this.info = info;
	}

	public Process getPob() {
		return pob;
	}

	public void setPob(Process pob) {
		this.pob = pob;
	}

	@Override
	public String toString() {
		return "MyServiceData [id=" + id + ", code=" + code + ", active=" + active + ", data=" + data + ", info=" + info
				+ ", pob=" + pob + "]";
	}
	
	
}
-------------
package com.app.raghu;

public class Process {

	private int pid;
	private String pcode;
	
	public int getPid() {
		return pid;
	}
	public void setPid(int pid) {
		this.pid = pid;
	}
	public String getPcode() {
		return pcode;
	}
	public void setPcode(String pcode) {
		this.pcode = pcode;
	}
	@Override
	public String toString() {
		return "Process [pid=" + pid + ", pcode=" + pcode + "]";
	}
	
	
}

-------------------

2. application.properties
my.app.id=20
my.app.code=MODEL
my.app.active=true

my.app.data[0]=A
my.app.data[1]=B
my.app.data[2]=C
#my.app.data=A,B,C

my.app.info.C1=M1
my.app.info.C2=M2

my.app.pob.pid=11
my.app.pob.pcode=AAA

3. Runner class
package com.app.raghu;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

@Component
public class ReadDataRunner implements CommandLineRunner {
	@Autowired
	private MyServiceData ob;
	
	public void run(String... args) throws Exception {
		System.out.println(ob);
	}

}
=================================================================
			YAML (.yml)
		     YAMALiant Language

*) Yet Another Markup Language

=> YAML (.yml in Spring boot / .yaml ) is used to represent
   data/input to pre-defined configuration.

=> YAML is better better compared to properties
   [memory / processing time / readable format ]

---ex: application.properties ------------
spring.datasource.driver-class-name=Oracle
spring.datasource.url=jdbc-oracle
spring.datasource.username=raghu
spring.datasource.password=ashok

--ex : application.yml -------------------
spring:
   datasource:
      driver-class-name: Oracle
      url: jdbc-oracle
      username: raghu
      password: ashok
------------------------------------------

Note:
1. No Duplicate Levels in YAML file
2. Every level should end with either :<NextLine> or :<oneSpace><value>
3. Every new level start (not for 1st line) 
   must have same space count (indentation) [at least one space]

4. Incase of List/Set/Array , index is represented using - (dash)
     variable:
     - value
     - value
     - value

5. Incase of Map/Properties, key:<space>value
    variable:
      mapKey: mapVal

6. Incase of Reference type, variable:<space>value
     refVariable:
       variable: value

7. Replace equals and dot (properties) with colon symbol (yml)
===========For Above Example YAML File is ===========
my:
  app:
    active: true
    code: MODEL
    data:
    - A
    - B
    - C
    id: 20
    info:
      C1: M1
      C2: M2
    pob:
      pid: 10
      pcode: AAA
===Example==========================================================
1. application.properties
-----------------------------
spring.datasource.url=jdbc-oracle
spring.datasource.user=sample
spring.mail.host=gmail
spring.mail.port=998

--application.yml-----------
spring:
   datasource:
      url: jdbc-oracle
      user: sample
   mail:
      host: gmail
      port: 998

2. application.properties
my.app.id=12
spring.model.test=OK
my.app.code=A
spring.format.code=A
spring.model.active=true
my.app.version=3.3
spring.format.grade=MN

---application.yml--------------
my:
  app:
    id: 12
    code: A
    version: 3.3
spring:
  model:
    test: OK
    active: true
  format:
    code: A
    grade: MN   

			Date : 20-09-2022
		   Spring Boot and Microservices
		           Mr. Raghu
			  ( ASHOK IT )
	-------------------------------------------
YAML Examples:-
Ref Link: http://mageddo.com/tools/yaml-converter

*) SnakeYAML is a API (JAR). This is used to read/parse YAML file
  data into Java Format, that is loaded finally into Spring
  Container Environment.

*) It is not recomanded to keep both properties and yaml file.
In this case properties is loaded with priority.

====Example#1===========================
1. Spring Bean
package com.app.raghu;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

@ConfigurationProperties("my.app")
@Component
public class EmailConfig {

	private String host;
	private int port;
	private String username;
	private String pasword;
	
	public String getHost() {
		return host;
	}
	public void setHost(String host) {
		this.host = host;
	}
	public int getPort() {
		return port;
	}
	public void setPort(int port) {
		this.port = port;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getPasword() {
		return pasword;
	}
	public void setPasword(String pasword) {
		this.pasword = pasword;
	}
	@Override
	public String toString() {
		return "EmailConfig [host=" + host + ", port=" + port + ", username=" + username + ", pasword=" + pasword + "]";
	}
	
	
}

----
2. application.yml
> right click on src/main/resources > new > file > enter name
> finish

> Right click on application.properties > Refactor > Rename (F2)
> Enter application.yml > finish
-------application.yml-------------
my:
  app:
    host: smtp.gmail.com
    port: 885
    username: sample
    pasword: ashok
------------------------------

3. Runner class
package com.app.raghu;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

@Component
public class CheckObjRunner implements CommandLineRunner {

	@Autowired
	private EmailConfig em;
	
	public void run(String... args) throws Exception {
		System.out.println(em);
	}

}
===================================================================
1. If we define YAML file in invalid format, then container/SnakeYAML
  will throw exceptions like: ScannerException, ParserException

2. If we define duplicate key with different value in proeprties
  file then last combination is loaded. But in YAML file
  DuplicateKeyException is thrown.

3. If key is present in properties file and setter method not found
   then variable holds default value. But in YAML file
   if key is present and setter not exist in code, then
   IllegalStateException: No setter found for property

====Ex#2=============================================================
1. Spring Bean
package com.app.raghu;

import java.util.Map;
import java.util.Set;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

@ConfigurationProperties("my.app")
@Component
public class EmailConfig {

	private String host;
	private int port;
	private String username;
	private String pasword;
	
	private Set<String> protocols;
	private Map<String,String> headers;
	
	private Certificate cob;
	
	public String getHost() {
		return host;
	}
	public void setHost(String host) {
		this.host = host;
	}
	public int getPort() {
		return port;
	}
	public void setPort(int port) {
		this.port = port;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getPasword() {
		return pasword;
	}
	public void setPasword(String pasword) {
		this.pasword = pasword;
	}
	public Set<String> getProtocols() {
		return protocols;
	}
	public void setProtocols(Set<String> protocols) {
		this.protocols = protocols;
	}
	public Map<String, String> getHeaders() {
		return headers;
	}
	public void setHeaders(Map<String, String> headers) {
		this.headers = headers;
	}
	public Certificate getCob() {
		return cob;
	}
	public void setCob(Certificate cob) {
		this.cob = cob;
	}
	@Override
	public String toString() {
		return "EmailConfig [host=" + host + ", port=" + port + ", username=" + username + ", pasword=" + pasword
				+ ", protocols=" + protocols + ", headers=" + headers + ", cob=" + cob + "]";
	}
	
	
	
	
}
----
package com.app.raghu;

public class Certificate {

	private String provider;
	private String expExist;
	
	public String getProvider() {
		return provider;
	}
	public void setProvider(String provider) {
		this.provider = provider;
	}
	public String getExpExist() {
		return expExist;
	}
	public void setExpExist(String expExist) {
		this.expExist = expExist;
	}
	@Override
	public String toString() {
		return "Certificate [provider=" + provider + ", expExist=" + expExist + "]";
	}
	
	
}


2. application.yml
my:
  app:
    cob:
      provider: GoDaddy
      expExist: INACTIVE
    host: smtp.gmail.com
    port: 885
#    port: 990
    username: sample
    pasword: ashok
    protocols:
    - SMTP
    - SMTPS
    - SMTP2
    headers:
      modified: true
      version: 3.2A
      content: JSON
         
3. Runner class
package com.app.raghu;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

@Component
public class CheckObjRunner implements CommandLineRunner {

	@Autowired
	private EmailConfig em;
	
	public void run(String... args) throws Exception {
		System.out.println(em);
	}

}
=================================================================
****************************************************************
		    Project Lombok API 
****************************************************************
=================================================================

=> Java Open Source API, used to generate source code before 
    you compile the code.

=> We need to add, activate Lombok JAR and use annotations.
Ref:
https://projectlombok.org/features/

1. After Creating stater project in pom.xml add this
<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
</dependency>

2. Update Maven Project, write sample code, Close IDE

3. Activate Lombok for your IDE
Goto:
C:\Users\ADMIN\.m2\repository\org\projectlombok\lombok\1.18.24

> Double click (or execute cmd : java -jar lombok-1.18.24.jar)
> Click on Specify Location if not found
> Click on Install/Update
> Quit Installer

4. Re Open IDE and apply Lombok Annotations
ex:
package com.app.raghu;

import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Setter
@Getter
@ToString
@EqualsAndHashCode
@NoArgsConstructor
@AllArgsConstructor
public class Process {

	private String code;
	private int port;
	private boolean exist;
}
===========================================================
1. @Setter : generates set methods
2. @Getter : generates get methods
3. @ToString : override toString logic 
4. @EqualsAndHashCode: generates equals and hashCode methods
5. @NoArgsConstructor : Default/zero param const
6. @AllArgsConstructor: All variables selected to create one
		parameterized constrcutor.
7. @RequiredArgsConstructor + @NonNull : To generate selected
	parameters constructor.
8. @Data : This one is used to generate set/get, toString,
   equals, hashCode and Required Args Constructor.


			Date : 21-09-2022
		  Spring Boot and Microservices			
		           Mr. RAGHU
                          (ASHOK IT )
	-------------------------------------------------
MySQL: (server only)
https://dev.mysql.com/downloads/windows/installer/8.0.html
SQLYog: (UI / Client)
https://github.com/webyog/sqlyog-community/wiki/Downloads

Project Lombok: 
=> It is Open Source , Source Code Generator API.
=> Setters, Getters, toString, equals, constructor..etc
=> Lombok Generates one intermediate source code file
   once it is compiled , Lombok is not requred (to run)
=> Lombok is used while developing application.
========================================================
@Setter : This annotation is used to generate set method for 
          variable in class
@Getter : This annotation is used to generate get method for 
          variable in class

@ToString : This method is from Object class that prints default
		FullClassName@HashCodeinHexaDeciamalFormat
            Here, it overrides toString logic, that prints
	    current object data.


Q) What is the contract between equals() and hashCode()?
A) While working with Hashing Design Patterns, 
	(HashMap, Hashtable..etc)
  to store data first index number is calculated using
  hash(key) [key-our class type]
  while retrieve/compare equals uses to check hash value.

--Example code---------
package com.app.raghu;

import org.springframework.stereotype.Component;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@Component
@Setter
@Getter
@ToString
@EqualsAndHashCode
public class Process {
	private String code;
	private Integer port;
	
}
---
package com.app.raghu;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

@Component
public class TestDataRunner implements CommandLineRunner {

	@Autowired
	private Process pob;
	
	public void run(String... args) throws Exception {
		pob.setCode("AA");
		pob.setPort(985);
		System.out.println(pob);
		System.out.println(pob.getCode());
		
		
	}

}

@EqualsAndHashCode: It generates(overrides) equals() method
  and hashCode() method.

*** Objects (JDK 1.7) **** (ctrl+shift+T) --> (ctrl+O)

Q) Who will generate default constrcutor in java?
A) Java compiler, if there are zero constrcutors in code.

*** A good coding standard always provide default/zero param
    constrcutor. Even before adding any param. constrcutors.
=============================================================
@NoArgsConstructor : Generates Zero Param constructor.
@AllArgsConstructor : Generates all params constructor based on
		variables order.
Ex:
@NoArgsConstructor
@AllArgsConstructor
public class Process {

	private Integer port;
	private String code;
	
}
Generated Source Code:
public class Process {

	private Integer port;
	private String code;
	public Process() {
	   super();
	}
	public Process(Integer port, String code) {
	   super();
	   this.port = port;
	   this.code = code;
	}
}

-------------------
@RequiredArgsConstructor:
  It will generate selected params/args constrcutor.
  We need to select variables using @NonNull
Ex:
@RequiredArgsConstructor
public class Process {

	@NonNull
	private Integer port;
	@NonNull
	private String code;
	private Double cost;
	private String type;
	
}
Generated Source code:
public class Process {
	private Integer port;
	private String code;
	private Double cost;
	private String type;
	public Process(Integer port,String code ){
	  super();
	  this.port = port;
	  this.code = code;
	}
}

Note:
1. If we add @RequiredArgsConstructor without any @NonNull variable
   then lombok generates a default constrcutor.
Ex:
@RequiredArgsConstructor
public class Process {
	private Integer port;
}
Generated Source code:
public class Process {
	private Integer port;
	public Process() {
	   super();
	}
}
2. If we add @AllArgsConstructor over a class which has zero variables
  then lombok generates a default constrcutor.

Ex:
@AllArgsConstructor
public class Process {
}
Generated Source code:
public class Process {
	public Process() {
	   super();
	}
}

3. Lombok just generates source code based on annotation definition
   later compiler validates generated source code.

ex:
@NoArgsConstructor
@AllArgsConstructor
@RequiredArgsConstructor
public class Process {
	
}
Generated Source Code:
public class Process {
	public Process() {
	   super();
	}
	public Process() {
	   super();
	}
	public Process() {
	   super();
	}
}

Ex#2
@AllArgsConstructor
@RequiredArgsConstructor
public class Process {
	@NonNull
	private String code;
}
Generated Source Code:
public class Process {
	private String code;
	public Process(String code) {
	   super();
	   this.code = code;
	}
	public Process(String code) {
	   super();
	   this.code = code;
	}
}

https://projectlombok.org/features/Builder
@Builder
public class Process {
	private int id;
	private String type;
	private String code;
}
Use:
Process p1 = 
	Process.builder()
		.code("AA")
		.id(88)
		.type("MODEL")
		.build();
=======================================================
@Data :- This is a combination of set, get, toString,
      hashcode, equals and RequiredArgsConstructor

Ex:
@Data
public class Process {
	private int id;
}
---------------------------------------------------------------
@Cleanup : Generates close() methods in final blocks

Use: try-with-resource concept.
try(FIS fis = new FIS()) {
}

Use: Enhanced try with resource
FIS fis = new FIS()
try(fis){

}
============================================================

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0.00 sec)

mysql> create database ashokit;
Query OK, 1 row affected (0.00 sec)

mysql> use ashokit;
Database changed
mysql> show tables;
Empty set (0.01 sec)

mysql>


			Date : 22-09-2022
		  Spring Boot and Microservices
		            Mr. RAGHU
			   (ASHOK IT )
	-----------------------------------------------
App Environment : A complete setup to run application.(DB,server,config, dep)
Ex: Dev, QA, UAT(Client test), Prod, PordSup..etc

===================================
Spring Boot Profiles:-
If we move our application from one Env. to another Env,
code remains same (at max), changes comes at input file
(properties/yaml).

=> In that case use one properties/yaml file for one environment.
=> File name must be :
	application-{profilename}.properties
	application-{profilename}.yml

=> Loading input file based on profilename is taken care by
   spring container.

Examples:
application.properties    (default profile)
application-qa.properties  (qa profile)
application-prod.properties  (prod profile)

-----------code-----------------------------------
*** choose Lombok while creating project.

1. Spring Bean
package com.app.raghu.dbcon;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

import lombok.Data;

@Component
@Data
@ConfigurationProperties("my.db")
public class MyDbConnection {

	private String driver;
	private String url;
	private String user;
	private String pwd;
	
}

2. Runner
package com.app.raghu.runner;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import com.app.raghu.dbcon.MyDbConnection;

@Component
public class TestDataRunner implements CommandLineRunner {

	@Autowired
	private MyDbConnection con;
	
	public void run(String... args) throws Exception {
		System.out.println(con);
	}

}

3. properties files

--application.properties--
my.db.driver=Oracle
my.db.url=jdbc-oracle
my.db.user=ashok
my.db.pwd=raghu

--application-qa.properties--
my.db.driver=MySQL
my.db.url=jdbc-mysql
my.db.user=ashok
my.db.pwd=raghu

--application-prod.properties--
my.db.driver=Postgress
my.db.url=jdbc-PSG
my.db.user=ashok
my.db.pwd=raghu


--------------------We can run in 3 ways-----------------
1. Using Spring Boot Tab
> Right click on Main class > Run as > Run Configuration
> Spring Boot tab > Profiles : Change to any dropdown option
> Apply > Run

2. Using External Arguments
> Right click on Main class > Run as > Run Configuration
> Arguments tab > Under Program Arguments  enter this
--spring.profiles.active=qa
> Apply > Run


3.*** Build Application ( Code ----> .jar/.war )
> Right click on Project > Run as > Maven Clean > next time
> Maven install (Wait for Build success message)

> Right click on target folder (then refresh)
> Choose properties > Copy location (or) click explorer symbol to open that location
> Open that location in cmd propmt

ex: D:\Workspace7AM_SpringBoot\06SpringBootProfilesExOne\target>

> now execute command:  
	java  -jar  <jarname>.jar  --spring.profiles.active=qa
        java  -jar  <warname>.war  --spring.profiles.active=qa
  

*)Note:
a. If a key is not found in our current profile(ex: prod)
  then container reads them from default profile(fallback)
		(or)
  If duplicate key=val are exist in our profile (ex: prod)
  just remove or comment them , they are loaded from
  default profile.

=============================================================
Q) Which profile is loaded if we did not specify any while running app?
A. Default profile : application.properties

Q) I want to activate a profile which is not present ?
  --spring.profiles.active=sample (sample is not exist)
A. Default profile : application.properties is loaded

Q) If few keys are not found in our current profiles?
A. (Ex: prod is current profile) Container will try to load
   keys from default profile for keys which are not found
   in current profile.

Q) How properties files are provided from outside of our project (or) jar file?
A) External Config (Spring Cloud Config Server)
https://cloud.spring.io/spring-cloud-config/reference/html/

===============================================================
			Profiles using YAML
===============================================================
1. using Multiple YAML Files
    application-{profile}.yml

2. Using Single YAML File (3 dash symbols )

-------application.yml---------
key: val

---
key:val

---
key:val

--------------------------------


Q) What is VM/JVM arguments (or -Dkey=val) in Java?
Q) What is application arguments / command line args 
	/ main method inputs / String[] ?

Ex: -Dspring.profiles.active=qa

==============code===========================
// classes are same as before

-YAML Files-

1. application.yml
my:
  db:
    driver: Oracle
    pwd: raghu
    url: jdbc-oracle
    user: ashok

2. application-qa.yml
my:
  db:
    driver: MySQL
    pwd: raghu
    url: jdbc-mysql
    user: ashok

3. application-prod.yml
my:
  db:
    driver: Postgress
    url: jdbc-PSG


--- all in one yaml File---------------

	application.yml

my:
  db:
    driver: Oracle
    pwd: raghu
    url: jdbc-oracle
    user: ashok
---
spring:
  profiles: qa
    
my:
  db:
    driver: MySQL
    pwd: raghu
    url: jdbc-mysql
    user: ashok
---
spring:
  profiles: prod
  
my:
  db:
    driver: Postgress
    pwd: raghu
    url: jdbc-psg
    user: ashok    


Q) Can we define multiple profiles data in single properties file
  like YAML file?
A. As of now NO.


			Date : 24-09-2022
		  Spring Boot and Microservices
		            Mr. RAGHU
			   (ASHOK IT )
	-----------------------------------------------
Profiles using YAML :-
1. Spring Bean
package com.app.raghu.dbcon;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Component;

import lombok.Data;

@Component
@Data
@ConfigurationProperties("my.db")
public class MyDbConnection {

	private String driver;
	private String url;
	private String user;
	private String pwd;
	
}

2. YAML File
my:
  db:
    driver: Oracle
    pwd: raghu
    url: jdbc-oracle
    user: ashok
---
spring:
  config:
    activate:
      on-profile:
      - prod
      - prodps
    
my:
  db:
    driver: MySQL
    pwd: raghu
    url: jdbc-mysql
    user: ashok
---
spring:
  config:
    activate:
      on-profile:
      - qa
      - uat
  
my:
  db:
    driver: Postgress
    pwd: raghu
    url: jdbc-psg
    user: ashok    

3. Runner class
package com.app.raghu.runner;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import com.app.raghu.dbcon.MyDbConnection;

@Component
public class TestDataRunner implements CommandLineRunner {

	@Autowired
	private MyDbConnection con;
	
	public void run(String... args) throws Exception {
		System.out.println(con);
	}

}
===============================================================
@Profile:-
  To execute a logic (create obj/call method) on a selected
  environment, we can use this.

> A conditional based execution.
Ex: I Want to inform spring container that execute below codes
   only at Prod Environment: EmailConfig, DbBackService ..etc

Case#1 No @Profile annotation : Logic will be executed in all env.
Case#2 @Profile("default")    : Execute only in dev environment.
Case#3 @Profile("profileName"): Execute in given profile env.
	ex: @Profile("prod")

*) Note:
1. If we did not provide any profile name while running application
   then Spring Container selected profile "default"

2. So, logics(class/method) having @Profile("default")
	will be executed.

3. @Profile is independent of properties/yaml.
  If a specific profile proeprties/yaml file is not present
  in code/workspace then container selected default one
  application.properties/application.yml
 
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
****************  @Profile Example Code *********************
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
1. Spring Beans
package com.app.raghu.runner;

import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Component;

@Component
//@Profile("default")
@Profile({"qa","default","uat"})
public class DbUserSetupRunner implements CommandLineRunner {

	public void run(String... args) throws Exception {
		System.out.println("FROM DbUser SETUP RUNNER");
	}

}
---------
package com.app.raghu.runner;

import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Component;

@Component
//@Profile("prod")
@Profile({"prod","podsup","uat"})
public class BackDataServiceRunner implements CommandLineRunner {

	public void run(String... args) throws Exception {
		System.out.println("FROM BACKUP DATA SERVICE");
	}

}
-------
package com.app.raghu.runner;

import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

@Component
public class MessageRunner implements CommandLineRunner {

	public void run(String... args) throws Exception {
		System.out.println("DEFAULT MESSAGE RUNNER");
	}

}



============================================================
Q) How can we inform container to create selected classes
   objects only in Prod Environment?

A) use @Profile over Component or Bean.
Ex#1
@Component
@Profile("prod")
class Sample {

}
Ex#2
@Configuration
class AppConfig {
  @Bean
  @Profile("prod")
  public DbCon dbc() {
    ..
  }
}

=============== @Profile for Object creation ===============
1. Spring Bean
package com.app.raghu.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Component;

import lombok.ToString;

@ToString
@Component
@Profile({"default","qa"})
public class ExportExcelService {
	
	@Value("csv")
	private String extCode;
	
	@Value("#{new java.util.Random().nextInt()}")
	private Integer formatId;
	
}
-------------
package com.app.raghu.service;

import lombok.Data;

@Data
public class PdfExportService {

	private String fileExt;
	private String ftype;
	
}
-------------------
2. Java Config Code
package com.app.raghu.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;

import com.app.raghu.service.PdfExportService;

@Configuration
public class AppConfig {
	
	@Bean
	@Profile({"default","qa"})
	public PdfExportService pdf() {
		PdfExportService p = new PdfExportService();
		p.setFileExt(".pdf");
		p.setFtype("Document-NPDF");
		return p;
	}
}
------------
3. Runner class
package com.app.raghu;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import com.app.raghu.service.ExportExcelService;
import com.app.raghu.service.PdfExportService;

@Component
public class TestObjRunner implements CommandLineRunner {
	
	@Autowired
	private ExportExcelService es;
	
	@Autowired
	private PdfExportService pdfs;
	
	public void run(String... args) throws Exception {
		System.out.println(es);
		System.out.println(pdfs);
	}

}


			    Date : 25-09-2022
			Spring Boot and Microservices
				Mr. RAGHU
			       ( ASHOK IT )
--------------------------------------------------------------------
ctrl+shift+T  > SpringApplication  > ctrl+O > run [select first run method]
-----------------------------------------------------------------
MySQL:
https://dev.mysql.com/downloads/windows/installer/8.0.html
mysql> show databases
mysql> create database boot7am;
mysql> use boot7am;
mysql> show tables;
mysql> create table employee(eid int,ename varchar(10),esal double);
mysql> desc employee;
mysql> insert into employee values(10,'A',200.0);
mysql> insert into employee values(11,'B',300.0);
mysql> insert into employee values(12,'C',400.0);
mysql> select * from employee;
mysql> select * from employee order by esal desc limit 2,1;


@Component @Value  @Autowired @Qualifier @Primary
@Configuration @Bean 
@ConfigurationProperties (Input file)
application.properties
application.yml
--------------------------------------------------------------------
@SpringBootApplication : @Configuration (Auto+Programme)
			 @ComponentScan

=> This annotation gives default basePackage using internally
   @ComponentScan. ie Starter/Main class package is taken as
   basePackage (your classes can be under same package or subpackage)

=> We can override this in Spring Boot using annotation: @ComponentScan
  @ComponentScan({"my.app.demo","com.app","com.example.demo"})

=> This annotation also takes care of configuration (programmer and
   pre-defined).

   When ever we add any Specific Dependency in pom.xml (classpath)
   then our parent gives starter and its configuration code to
   child project.
========================================================================
Banner : This is nothing but logo(never shown to enduser) printed at console
 while starting application.

=> We can override this using a file created manually at src/main/resources
 name is : banner.txt 

 https://devops.datenkollektiv.de/banner.txt/index.html

=> We can disable this banner code using this:
SpringApplication sa = new SpringApplication(DemoApplication.class);
sa.setBannerMode(Mode.OFF);
sa.run(args);

-------------------------------------------------------
Enum : JDK 1.5 : Set of named constants.
-------------------------------------------------------
*) We can calculate time taken by a process using Spring Core
   "StopWatch" class , methods: start() and stop()

*) We can even use JDK 8 java.time package Duration(C).

package com.app.test;

import java.time.Duration;

import org.springframework.util.StopWatch;

public class Test {
	
	public static void main(String[] args) {
		long startTime = System.nanoTime();
		System.out.println("START");
		for (int i = 0; i < Integer.MAX_VALUE; i++) {
			Math.pow( Math.pow(i+1,2), i+3);
		}
		System.out.println("DONE");
		Duration timeTakenToStartup = Duration.ofNanos(System.nanoTime() - startTime);
		
		System.out.println(timeTakenToStartup.getSeconds());
		System.out.println(timeTakenToStartup.getNano());
	}
	

	public static void main1(String[] args) {
		StopWatch sw = new StopWatch();
		
		sw.start();
		System.out.println("START");
		for (int i = 0; i < Integer.MAX_VALUE; i++) {
			Math.pow( Math.pow(i+1,2), i+3);
		}
		sw.stop();
		
		System.out.println("DONE");
		
		System.out.println(sw.getTotalTimeSeconds());
		System.out.println(sw.getTotalTimeMillis());
		System.out.println(sw.getTotalTimeNanos());
	}
}

=============================================================
*) environment: This is a memory (Object : StandardEnvironment)
   that holds all key-val pairs of every input (properties, yaml
   option args --key=val)

*) Spring container type can be standard, servlet, reactive.
AnnotationConfigApplicationContext
AnnotationConfigServletWebServerApplicationContext
AnnotationConfigReactiveWebServerApplicationContext

--sample main class code--------
package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;

@SpringBootApplication
public class SampleOneApplication {

	public static void main(String[] args) {
		ApplicationContext ac = SpringApplication.run(SampleOneApplication.class, args);
		System.out.println(ac.getClass().getName());
	}

}
--------------------------------------------------------------
*) all our runners (Runner classes) are executed at last
   after creating spring container.


			      Date : 26-09-2022
			  Spring Boot and Microservices
				Mr. RAGHU
			       (ASHOKIT)
---------------------------------------------------------------------
Database : It is a storage type, holds data in tables(Rows/Columns).

JDBC: (Java DataBase Connection):
=> This is given by Sun Microsystems/ Oracle Corp.
=> It is used to perform database operations from Java application
(SELECT, INSERT, UPDATE, DELETE,...)
=> JDBC API contains interfaces like Connection, Statement,ResultSet..etc
Doc:
https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/

=> Here, all are implemented by vendors (Oracle, MySQL,...)
  and given jars (ojdbc.jar, mysq-connector.jar).

=> If we move one db to another db,
  Java code is same.
  Properties needs to be modified (driver class, url, user, password)
  Some SQL Queries need to be modified.
  (SQL Query is database dependent).

========================================================================
JPA [Java Persistency API]:- It is Object Oriented Programming for
	database Operations.
=> We do not define any SQL Query. We perform operations over Objects
  that effects db tables.
=> This is theory (ORM) : Object Relational Mapping, it is given by
  Sun/Oracle.
=> Hibernate with JPA , Eclipse Link, nHibernate..etc vendors.

-ORM--
*) Perform all Operations over class/object.
*) One class is equals to one table.
*) One variable is equals to one column.
*) One object is equals to one row.
*) It is Database Independent (no SQL Recomanded).

*) Here JPA is a Specification (Standard with some rules/interfaces)
  given by Sun/Oracle, where implementations are : Hibernate,
  iBatis, nHibernate, EclipseLink..etc (Vendors)

*) We define Java application using JPA only. 
  But we need any one Vendor jars/runtime.
  If we move from one vendor to another code remains same.
  Only some configuration/properties need to be modified.

==================================================================
	ORM                JPA                 Hibernate
	Theory          Standard (Code)    Vendor(Internal Code)
==================================================================
Q) What is the main diff b/w JDBC and JPA?
A)
   JDBC works on SQL Concept (not Objects), Manual SQLs
   JPA works on Objects Concepts(ORM), SQLs are generated.

Q) What is the diff b/w ORM, JPA and Hibernate?
A) 
   ORM : Theory / Concept
   JPA : Code / Standard given by Sun/Oracle [Specification]
   Hibernate : Vendor/Implementation of JPA

Q) Can we write application using hibernate without JPA?
A) YES. Old Hibernate did not defined over JPA.
   But problem is if a better vendor came for ORM 
   then moving to that makes lot of code changes.

    It is not recomanded.

Q) What is the advantage of JPA over JDBC?
A)
  No Manual SQL queries for CRUD
  Schema creation is automated (Both Manual & Automated )
  No Checked Exceptions (SQLException)
  Operations on Objects(ORM)
  JPQL for Custom Queries [Java Persistency Query Language]
           which is Database Independent.
  PrimaryKey is must (good even) in JPA
===================================================================
JPA (with Hibernate) One Example:-
1. Entity (class) : A class that is mapped with database table
2. Configuration File (.xml/.properties/.java)
3. Operation Code(Test class)

*) Note:
1. @Entity : Maps java class with table and variables with columns.
2. @Id : indicates Primary Key column
3. @Table : Optional, if we did not specify then class name is taken as table name
4. @Column : Optional, if we did not specify then variable name is taken as column name

@Data
@Entity
@Table(name="emptab")
public class Employee {
  @Id
  @Column(name="eid")
  private Integer empId;
  @Column(name="ename")
  private String empName;
  @Column(name="esal")
  private Double empSal;
}

2. Configuration File (.xml/.properties/.java)
=> contains data in KEY=VALs
=> Connection keys:  driver class, url, username, password
=> JPA Keys : show_sql, dialect, hbm2ddl.auto ..etc

Ref:
https://github.com/javabyraghu/HibernateWithJPA


dialect: it is a class that generates sqls on operations performed.
Ex: Oracle10gDialect, MySQL8Dialect,..etc

show_sql : Display the generated SQLs.

hbm2ddl.auto: Handles schema (create/alter/drop)
  => create : Create new table on app start
  => create-drop : create new table on app start,
		  when we stop app delete table.
  => update : Create new table if not exist, else use same table.
  => validate: Does nothing. Programmer has to write manual SQls 
		for table creations.

-------------------------------------------------------------
3. Operation Code(Test class)
=> Prepare setup /Environment (Load driver, connection..etc)
    taken care by  EntityManagerFactory
=> Create setup for operations (insert, update,delete...)
   taken care by EntityManager
=> Transaction Management taken care by EntityTrancation
     (commit -- save /rollback  -- cancel)

----------------Full Code--------------------------
1. pom.xml
<properties>
		<maven.compiler.source>11</maven.compiler.source>
		<maven.compiler.target>11</maven.compiler.target>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>5.6.11.Final</version>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>8.0.23</version>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.24</version>
		</dependency>

	</dependencies>

2. Entity class
package com.app.raghu;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.Data;

@Data
@Entity
@Table(name="emptab")
public class Employee {
  @Id
  @Column(name="eid")
  private Integer empId;
  @Column(name="ename")
  private String empName;
  @Column(name="esal")
  private Double empSal;
}

3. XML Config
<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.1" xmlns="http://xmlns.jcp.org/xml/ns/persistence"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
        http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
    <persistence-unit name="AppDB">
        <properties>
            <property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver" />
            <property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/boot7am" />
            <property name="javax.persistence.jdbc.user" value="root" />
            <property name="javax.persistence.jdbc.password" value="root" />
            <property name="hibernate.show_sql" value="true" />
            <property name="hibernate.hbm2ddl.auto" value="create" />
            <property name="hibernate.dialect" value="org.hibernate.dialect.MySQL8Dialect" />
        </properties>
    </persistence-unit>
     
</persistence>

4. Test class
package com.app.raghu;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;

public class TestOperations {
	public static void main(String[] args) {
		EntityTransaction tx = null;
		try {
			// 1. (Loads Driver, Creates DB Connections, Prepare stmt)
			EntityManagerFactory emf = Persistence.createEntityManagerFactory("AppDB");
			System.out.println(emf.getClass().getName());

			// 2. (TODO Operations--insert, update,....)
			EntityManager em = emf.createEntityManager();
			System.out.println(em.getClass().getName());

			// 3. create Transaction
			tx = em.getTransaction();
			System.out.println(tx.getClass().getName());
			// 4. Start Transaction
			tx.begin();

			// 5. Perform operation
			// save data into DB
			Employee emp = new Employee();
			emp.setEmpId(10);
			emp.setEmpName("ABC");
			emp.setEmpSal(500.0);

			em.persist(emp); // SQL: INSERT INTO ...

			// 6. commit
			tx.commit();

			// 7. close
			emf.close();
		} catch (Exception e) {
			// rollback if any problem
			tx.rollback();
			e.printStackTrace();
		}
	}
}
=======================MySQL======================================
> show databases
> use boot7am;
> show tables;
> select * from emptab;

			    Date : 27-09-2022
			Spring Boot and Microservices
				Mr. RAGHU
			       ( ASHOK IT )
   --------------------------------------------------------------------
			Spring Boot : Data JPA

JPA : ORM Framework (or API), used to perform database operations 
	using OOPs concepts (Object Oriented).

=> We can perform all operations by writing code.
=> EntityManager : has given methods to perform operations 
   persist [save], merge[update], find[select], remove[delete]

=================================================================
Data JPA: It will generate code to perform operations.
=> This is given by Spring boot, it internally generates JPA code only.
=> Dynamic Proxy : A class created at runtime and object also.
Dynamic Proxy:-
https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/proxy.html

=> Here we need to define code files:
  1. Entity class
  2. Repository Interface ( class generated at runtime)
  3. Properties for DB Connection and JPA Config.

--Given interfaces by Spring boot data JPA--
CrudRepository<T, ID>  [insert , update , delete, select ]
PagingAndSortingRepository<T, ID>  [Sorting, Pagination ]
JpaRepository<T,ID>  [JPA based Operations, Example obj, batch..etc]

T= Entity class, ID = PK DataType

SimpleJpaRepository<T, ID> : It is class having internally JPA code
for above interfaces.

=> SimpleJpaRepository is a template class ie how Database Operations
  code looks like (Generic code, not for a Specific class)
=> We need to define one interface that extends any one of one Repository 
   interface.
=> Internally Data JPA uses SimpleJpaRepository and ___Repository
   interface and generates one class  (Proxy)

======================================================================
Q) Entity v/s DTO ?
A) Entity : A class mapped with Database table 
   DTO : a class contains variables set/get , used to pass 
        as object from one method to another method.

Q) What is DAO and DTO ?
A)
  DAO : Data Access Object
  A class that contains code to perform Database Operations

  DTO : A class contains data (variables, set/get ) passed b/w methods

Q) What is Repository?
A) 
  An interface defined with Type and ID
  that is used to perform database Operations

Q) What is Dynamic Proxy ?
https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/proxy.html
=> A class/code generated at runtime by taking set of interfaces
  and a template (Format) class also some inputs(T,ID).

-> Learning Order: Enum, Annotations, Generics, Reflection, Proxy

============Code================================
01. SpringBootDataJpaEx
 Spring Data JPA, MySQL, Lombok

1. Entity class
package com.app.raghu.entity;

//ctrl+shift+O
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.Data;

@Data
@Entity
@Table(name="student_tab")
public class Student {
	@Id
	@Column(name="sid")
	private Integer stdId;
	
	@Column(name="sname")
	private String stdName;
	
	@Column(name="sfee")
	private Double stdFee;
	
}

2. Repository interfaces
package com.app.raghu.repo;

import org.springframework.data.jpa.repository.JpaRepository;

import com.app.raghu.entity.Student;

public interface StudentRepository 
	extends JpaRepository<Student, Integer>
{

}

3. properties
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/boot7am
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update

4. Runner class
package com.app.raghu.runner;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import com.app.raghu.entity.Student;
import com.app.raghu.repo.StudentRepository;

@Component
public class TestOprRunner implements CommandLineRunner {

	@Autowired
	private StudentRepository repo;
	
	public void run(String... args) throws Exception {
		System.out.println(repo.getClass().getName());
		
		Student sob = new Student();
		sob.setStdId(99);
		sob.setStdName("SAM");
		sob.setStdFee(20000.0);
		
		repo.save(sob); // INSERT OR UPDATE
		
	}

}

			    Date : 28-09-2022
			Spring Boot and Microservices
				Mr. RAGHU
			       ( ASHOK IT )
   --------------------------------------------------------------------
Ref This :-
https://javahungry.blogspot.com/p/interview.html
Ref This :-
https://www.youtube.com/c/AshokIT/search?query=java%208

			Spring Boot : Data JPA
ctrl+shift+T : CrudRepository
ctrl+O : click on one method
ctrl + keep mouse over : Select Open Implementation

---------------CrudRepository methods---------------------------
1. save(obj) : obj
This method will check given object is present or not based on PK
inside DB table.

=> SELECT * FROM TABLE WHERE PK_COL = VAL

=> if Record is present --> then update row
=> Else INSERT ROW.

*) If same object data is present in DB, then save() method does nothing
   [no update or no insert]
--------------------------------------------------------------------
2. saveAll(Iterable) :
  This method takes multiple objects at a time as a Collection type
  and performs same operation like save() method.

=================================================================

3. findAll(): Iterable<T>
  This method is used to fetch all rows from DB table.
  Gives as Iterable format.

SQL: select * from tablename;
=================================================================

4. existsById(id): boolean
It will check given Id (row) present in Db table or not.
If present then true, else false.

5. count() : long
This method returns no.of rows present in DB table.

==============code=================================
1. Application : Dep : Spring Data JPA, MySQL, Lombok

2. application.yml
spring:
  datasource:
#    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/boot7am
    username: root
    password: root
    
  jpa:
    show-sql: true
#    database-platform: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl-auto: create

3. Entity class
package com.app.raghu.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name="product_tab")
public class Product {
	
	@Id
	@Column(name="pid")
	private Integer prodId;
	
	@Column(name="pname")
	private String prodName;
	@Column(name="pcost")
	private Double prodCost;
	
}

4. Repository interfaces
package com.app.raghu.repo;

import org.springframework.data.repository.CrudRepository;

import com.app.raghu.entity.Product;

public interface ProductRepository 
	extends CrudRepository<Product, Integer>{

}

5. Runner classes
package com.app.raghu.runner;

import java.util.Arrays;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import com.app.raghu.entity.Product;
import com.app.raghu.repo.ProductRepository;

@Component
public class TestOperationsRunner implements CommandLineRunner {
	
	@Autowired
	private ProductRepository repo;

	public void run(String... args) throws Exception {
		//System.out.println(repo.getClass().getName());
		
		Product p1 = new Product(10,"P2",300.0);
		Product p2 = new Product(11,"P3",400.0);
		Product p3 = new Product(12,"P4",500.0);
		
		/*repo.save(p1);
		repo.save(p2);
		repo.save(p3);*/
		repo.saveAll(Arrays.asList(p1,p2,p3));
		
		Iterable<Product> data = repo.findAll();
		//JDK 1.5 forEach Loop
		for(Product pob:data) {
			System.out.println(pob);
		}
		System.out.println("--------------");
		//JDK 1.8 Default method + Lambda Expression
		data.forEach(ob-> System.out.println(ob));

		System.out.println("*********");
		//JDK 1.8 Default method + Method References
		data.forEach(System.out::println);
		
		System.out.println(repo.existsById(11));//true
		System.out.println(repo.existsById(55));//false
		
		System.out.println(repo.count());//long -- no.of rows
		
	}
}


